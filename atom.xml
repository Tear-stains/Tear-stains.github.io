<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tear-stains</title>
  
  <subtitle>notes</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-07-03T01:26:31.524Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>GY</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>centos7安装FastDFS详解</title>
    <link href="http://yoursite.com/2020/07/03/centos7%E5%AE%89%E8%A3%85FastDFS%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2020/07/03/centos7安装FastDFS详解/</id>
    <published>2020-07-03T01:25:41.000Z</published>
    <updated>2020-07-03T01:26:31.524Z</updated>
    
    <content type="html"><![CDATA[<h1 id="centos7安装FastDFS详解"><a href="#centos7安装FastDFS详解" class="headerlink" title="centos7安装FastDFS详解"></a>centos7安装FastDFS详解</h1><h2 id="配置FastDFS环境准备工作"><a href="#配置FastDFS环境准备工作" class="headerlink" title="配置FastDFS环境准备工作"></a>配置FastDFS环境准备工作</h2><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p>FastDFS:<a href="https://github.com/happyfish100/" target="_blank" rel="noopener">https://github.com/happyfish100/</a></p><p>官方安装文档：<a href="https://github.com/happyfish100/fastdfs/wiki" target="_blank" rel="noopener">https://github.com/happyfish100/fastdfs/wiki</a></p><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ul><li>Centos7.x 两台，分别安装tracker与storage</li><li>下载安装包：<ul><li>libfatscommon：FastDFS分离出的一些公用函数包</li><li>FastDFS：FastDFS本体</li><li>fastdfs-nginx-module：FastDFS和nginx的关联模块</li><li>nginx：发布访问服务</li></ul></li></ul><h3 id="安装步骤-tracker与storage两台服务器都要执行"><a href="#安装步骤-tracker与storage两台服务器都要执行" class="headerlink" title="安装步骤 (tracker与storage两台服务器都要执行)"></a>安装步骤 (tracker与storage两台服务器都要执行)</h3><ul><li><p>安装基础环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install -y gcc gcc-c++</span><br><span class="line">yum -y install libevent</span><br></pre></td></tr></table></figure></li><li><p>安装libfatscommon函数库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 解压</span><br><span class="line">tar -zxvf libfastcommon-1.0.42.tar.gz</span><br></pre></td></tr></table></figure><ul><li>进入libfastcommon文件夹，编译并且安装</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd libfastcommon-1.0.42</span><br><span class="line">./make.sh</span><br><span class="line">./make.sh install</span><br></pre></td></tr></table></figure></li><li><p>安装fastdfs主程序文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 解压</span><br><span class="line">tar -zxvf fastdfs-6.04.tar.gz</span><br></pre></td></tr></table></figure><p>进入到fastdfs目录，安装fastdfs</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd fastdfs-6.04/</span><br><span class="line">./make.sh</span><br><span class="line">./make.sh install</span><br></pre></td></tr></table></figure></li><li><p>拷贝配置文件如下：</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /home/software/FastDFS/fastdfs-6.04/conf/* /etc/fdfs/</span><br></pre></td></tr></table></figure><h2 id="配置tracker服务"><a href="#配置tracker服务" class="headerlink" title="配置tracker服务"></a>配置tracker服务</h2><h3 id="修改tracker配置文件"><a href="#修改tracker配置文件" class="headerlink" title="修改tracker配置文件"></a>修改tracker配置文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/fdfs/tracker.conf</span><br></pre></td></tr></table></figure><p>修改tracker配置文件，此为tracker的工作目录，保存数据以及日志</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">base_path=/usr/local/fastdfs/tracker</span><br></pre></td></tr></table></figure><p>创建tracker工作目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /usr/local/fastdfs/tracker -p</span><br></pre></td></tr></table></figure><h3 id="启动tracker服务"><a href="#启动tracker服务" class="headerlink" title="启动tracker服务"></a>启动tracker服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/fdfs_trackerd /etc/fdfs/tracker.conf</span><br></pre></td></tr></table></figure><p>检查进程如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef|grep tracker</span><br></pre></td></tr></table></figure><p><img src="D:%5Chexo%5Csource_posts%5Cimage%5Cimage-20200619100511089.png" alt="image-20200619100511089"></p><p>停止tracker</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/stop.sh /etc/fdfs/tracker.conf</span><br></pre></td></tr></table></figure><h2 id="配置storage服务"><a href="#配置storage服务" class="headerlink" title="配置storage服务"></a>配置storage服务</h2><h3 id="修改storage配置文件"><a href="#修改storage配置文件" class="headerlink" title="修改storage配置文件"></a>修改storage配置文件</h3><p>修改该storage.conf配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/fdfs/storage.conf</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 修改组名</span><br><span class="line">group_name=groupTest</span><br><span class="line"><span class="meta">#</span> 修改storage的工作空间</span><br><span class="line">base_path=/usr/local/fastdfs/storage</span><br><span class="line"><span class="meta">#</span> 修改storage的存储空间</span><br><span class="line">store_path0=/usr/local/fastdfs/storage</span><br><span class="line"><span class="meta">#</span> 修改tracker的地址和端口号，用于心跳</span><br><span class="line">tracker_server=(trackerip):22122</span><br></pre></td></tr></table></figure><p>创建storage工作目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /usr/local/fastdfs/storage -p</span><br></pre></td></tr></table></figure><h3 id="启动storage"><a href="#启动storage" class="headerlink" title="启动storage"></a>启动storage</h3><p><strong>前提：必须首先启动tracker</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/fdfs_storaged /etc/fdfs/storage.conf</span><br></pre></td></tr></table></figure><p>检查进程如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef|grep storage</span><br></pre></td></tr></table></figure><p><img src="D:%5Chexo%5Csource_posts%5Cimage%5Cimage-20200619101616170.png" alt="image-20200619101616170"></p><h3 id="测试上传-在storage服务器中操作"><a href="#测试上传-在storage服务器中操作" class="headerlink" title="测试上传(在storage服务器中操作)"></a>测试上传(在storage服务器中操作)</h3><p>修改的client配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/fdfs/client.conf</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">base_path=/usr/local/fastdfs/client</span><br><span class="line">tracker_server=(trackerip):22122</span><br></pre></td></tr></table></figure><p>创建client工作目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /usr/local/fastdfs/client</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/fdfs_test /etc/fdfs/client.conf upload ./testUpload.jpg</span><br></pre></td></tr></table></figure><img src="D:\hexo\source\_posts\image\image-20200619102810574.png" style="zoom:75%;"><p>查看上传的文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/fastdfs/storage/data/00/00</span><br></pre></td></tr></table></figure><p><img src="D:%5Chexo%5Csource_posts%5Cimage%5Cimage-20200619103434822.png" alt="image-20200619103434822；"></p><h2 id="配置nginx服务器"><a href="#配置nginx服务器" class="headerlink" title="配置nginx服务器"></a>配置nginx服务器</h2><p>fastdfs安装好以后是无法通过http访问的，这个时候就需要借助nginx了，所以需要安装fastdfs的第三方模块到nginx中，就能使用了。nginx需要和storage在同一个节点。</p><h3 id="安装nginx插件"><a href="#安装nginx插件" class="headerlink" title="安装nginx插件"></a>安装nginx插件</h3><p>解压nginx的fastdfs压缩包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf fastdfs-nginx-module-1.22.tar.gz</span><br></pre></td></tr></table></figure><p>复制配置文件如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp mod_fastdfs.conf /etc/fdfs</span><br></pre></td></tr></table></figure><p>修改/fastdfs-nginx-module/src/config文件，主要是修改路径，把<code>local</code>删除，因为fastdfs安装的时候我们没有修改路径，原路径是/usr/local/incloud</p><p><img src="D:%5Chexo%5Csource_posts%5Cimage%5Cimage-20200619154308352.png" alt="image-20200619154308352"></p><h3 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h3><ol><li><p>去<a href="http://nginx.org/" target="_blank" rel="noopener">官网http://nginx.org/</a>下载对应的nginx包，推荐使用稳定版本</p></li><li><p>上传nginx到linux系统</p></li><li><p>安装依赖环境</p><p>(1)安装gcc环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install gcc-c++</span><br></pre></td></tr></table></figure><p>(2)安装PCRE库，用于解析正则表达式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y pcre pcre-devel</span><br></pre></td></tr></table></figure><p>(3)zlib压缩和解压缩依赖，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y zlib zlib-devel</span><br></pre></td></tr></table></figure><p>(4)SSL 安全的加密的套接字协议层，用于HTTP安全传输，也就是https</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y openssl openssl-devel</span><br></pre></td></tr></table></figure></li><li><p>解压，需要注意，解压后得到的是源码，源码需要编译后才能安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf nginx-1.16.1.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>编译之前，先创建nginx临时目录，如果不创建，在启动nginx的过程中会报错</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /var/temp/nginx -p</span><br></pre></td></tr></table></figure></li><li><p>在nginx目录，输入如下命令进行配置，目的是为了创建makefile文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd nginx-1.16.1</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">./configure \</span><br><span class="line">--prefix=/usr/local/nginx \</span><br><span class="line">--pid-path=/var/run/nginx/nginx.pid \</span><br><span class="line">--lock-path=/var/lock/nginx.lock \</span><br><span class="line">--error-log-path=/var/log/nginx/error.log \</span><br><span class="line">--http-log-path=/var/log/nginx/access.log \</span><br><span class="line">--with-http_gzip_static_module \</span><br><span class="line">--http-client-body-temp-path=/var/temp/nginx/client \</span><br><span class="line">--http-proxy-temp-path=/var/temp/nginx/proxy \</span><br><span class="line">--http-fastcgi-temp-path=/var/temp/nginx/fastcgi \</span><br><span class="line">--http-uwsgi-temp-path=/var/temp/nginx/uwsgi \</span><br><span class="line">--http-scgi-temp-path=/var/temp/nginx/scgi \</span><br><span class="line">--add-module=/home/software/fdfs/fastdfs-nginx-module-1.22/src</span><br></pre></td></tr></table></figure><p>主要新增一个第三方模块</p><p>修改 mod_fastdfs.conf 配置文件</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">base_path=/usr/local/fastdfs/tmp</span><br><span class="line">tracker_server=(trackerip):22122</span><br><span class="line">group_name=groupTest</span><br><span class="line">url_have_group_name = true</span><br><span class="line">store0_path=/usr/local/fastdfs/storage</span><br></pre></td></tr></table></figure> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /usr/local/fastdfs/tmp</span><br></pre></td></tr></table></figure><p> 修改nginx.conf，添加如下虚拟主机：</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       8888;</span><br><span class="line">    server_name  localhost;</span><br><span class="line">   </span><br><span class="line">    location /groupTest/M00 &#123;</span><br><span class="line">            ngx_fastdfs_module;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>make编译</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure></li><li><p>安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make install</span><br></pre></td></tr></table></figure></li><li><p>进入sbin目录启动nginx</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nginx</span><br></pre></td></tr></table></figure><ul><li>停止：./nginx -s stop</li><li>重新加载：./nginx -s reload</li></ul></li></ol><h3 id="浏览器测试"><a href="#浏览器测试" class="headerlink" title="浏览器测试"></a>浏览器测试</h3><p>浏览器输入地址</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">例：http://10.10.10.115:8888/groupTest/M00/00/00/CgoKc17sIdSAIZ6pADfje97FrYA794.JPG</span><br><span class="line"><span class="attribute">http://(storageip):8888/groupTest/M00/00/00/(imagename)</span></span><br></pre></td></tr></table></figure><h2 id="SpringBoot集成FastDFS"><a href="#SpringBoot集成FastDFS" class="headerlink" title="SpringBoot集成FastDFS"></a>SpringBoot集成FastDFS</h2><p>###引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.github.tobato/fastdfs-client --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.tobato<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastdfs-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.26.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>###application.yml中加入配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">############################################################</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># fdfs 配置</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">############################################################</span></span><br><span class="line"><span class="attr">fdfs:</span></span><br><span class="line"><span class="attr">  connect-timeout:</span> <span class="number">30</span>   <span class="comment"># 连接的超时时间</span></span><br><span class="line"><span class="attr">  so-timeout:</span> <span class="number">30</span>        <span class="comment"># 读取的超时时间</span></span><br><span class="line"><span class="attr">  tracker-list:</span> <span class="string">(trackerip):22122</span>   <span class="comment"># tracker服务所在的ip地址和端口号</span></span><br></pre></td></tr></table></figure><h3 id="文件上传service"><a href="#文件上传service" class="headerlink" title="文件上传service"></a>文件上传service</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gy.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.tobato.fastdfs.domain.fdfs.StorePath;</span><br><span class="line"><span class="keyword">import</span> com.github.tobato.fastdfs.service.FastFileStorageClient;</span><br><span class="line"><span class="keyword">import</span> com.gy.service.FdfsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FdfsServiceImpl</span> <span class="keyword">implements</span> <span class="title">FdfsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> FastFileStorageClient fastFileStorageClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> FileResource fileResource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">upload</span><span class="params">(MultipartFile file, String fileExtName)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        StorePath storePath = fastFileStorageClient.uploadFile(file.getInputStream(),</span><br><span class="line">                                file.getSize(),</span><br><span class="line">                                fileExtName,</span><br><span class="line">                                <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        String path = storePath.getFullPath();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> path;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>###String转MultipartFile</p><p>工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.course.server.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"><span class="keyword">import</span> sun.misc.BASE64Decoder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Base64ToMultipartFile</span> <span class="keyword">implements</span> <span class="title">MultipartFile</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">byte</span>[] imgContent;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String header;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Base64ToMultipartFile</span><span class="params">(<span class="keyword">byte</span>[] imgContent, String header)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.imgContent = imgContent;</span><br><span class="line">        <span class="keyword">this</span>.header = header.split(<span class="string">";"</span>)[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO - implementation depends on your requirements</span></span><br><span class="line">        <span class="keyword">return</span> System.currentTimeMillis() + Math.random() + <span class="string">"."</span> + header.split(<span class="string">"/"</span>)[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getOriginalFilename</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO - implementation depends on your requirements</span></span><br><span class="line">        <span class="keyword">return</span> System.currentTimeMillis() + (<span class="keyword">int</span>) Math.random() * <span class="number">10000</span> + <span class="string">"."</span> + header.split(<span class="string">"/"</span>)[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContentType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO - implementation depends on your requirements</span></span><br><span class="line">        <span class="keyword">return</span> header.split(<span class="string">":"</span>)[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> imgContent == <span class="keyword">null</span> || imgContent.length == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> imgContent.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] getBytes() <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">return</span> imgContent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> InputStream <span class="title">getInputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ByteArrayInputStream(imgContent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transferTo</span><span class="params">(File dest)</span> <span class="keyword">throws</span> IOException, IllegalStateException </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> FileOutputStream(dest).write(imgContent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MultipartFile <span class="title">base64ToMultipart</span><span class="params">(String base64)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String[] baseStrs = base64.split(<span class="string">","</span>);</span><br><span class="line"></span><br><span class="line">            BASE64Decoder decoder = <span class="keyword">new</span> BASE64Decoder();</span><br><span class="line">            <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">0</span>];</span><br><span class="line">            b = decoder.decodeBuffer(baseStrs[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; b.length; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (b[i] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    b[i] += <span class="number">256</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Base64ToMultipartFile(b, baseStrs[<span class="number">0</span>]);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/upload"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseDto <span class="title">upload</span><span class="params">(String shardBase64)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    MultipartFile shard = Base64ToMultipartFile.base64ToMultipart(shardBase64);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;centos7安装FastDFS详解&quot;&gt;&lt;a href=&quot;#centos7安装FastDFS详解&quot; class=&quot;headerlink&quot; title=&quot;centos7安装FastDFS详解&quot;&gt;&lt;/a&gt;centos7安装FastDFS详解&lt;/h1&gt;&lt;h2 id=&quot;配
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>maven</title>
    <link href="http://yoursite.com/2019/07/27/maven/"/>
    <id>http://yoursite.com/2019/07/27/maven/</id>
    <published>2019-07-27T11:51:02.000Z</published>
    <updated>2019-07-30T16:08:24.535Z</updated>
    
    <content type="html"><![CDATA[<h1 id="maven介绍"><a href="#maven介绍" class="headerlink" title="maven介绍"></a>maven介绍</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;maven介绍&quot;&gt;&lt;a href=&quot;#maven介绍&quot; class=&quot;headerlink&quot; title=&quot;maven介绍&quot;&gt;&lt;/a&gt;maven介绍&lt;/h1&gt;
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="maven" scheme="http://yoursite.com/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot入门</title>
    <link href="http://yoursite.com/2019/07/26/SpringBoot%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2019/07/26/SpringBoot入门/</id>
    <published>2019-07-26T14:51:37.000Z</published>
    <updated>2019-07-26T14:54:32.586Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="SpringBoot" scheme="http://yoursite.com/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>activeMQ详解</title>
    <link href="http://yoursite.com/2019/07/25/activeMQ%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/07/25/activeMQ详解/</id>
    <published>2019-07-25T13:48:13.000Z</published>
    <updated>2019-07-25T13:48:59.759Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ActiveMQ"><a href="#ActiveMQ" class="headerlink" title="ActiveMQ"></a>ActiveMQ</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Producer:（生产者)</span><br><span class="line">Consumer:（消费者）</span><br><span class="line">Queues:队列消息，也叫点对点消息</span><br><span class="line">Number of Pending Message：没有消费的消息数量</span><br><span class="line">Number of Consumers：连接得消费者</span><br><span class="line">Messages Enqueued：进入到队列中得消息数量</span><br><span class="line">Messages Dequeued：已经出列得消息数量</span><br><span class="line">Topics:订阅消息, 类似广播的消息</span><br></pre></td></tr></table></figure><h2 id="消息中间件-MOM"><a href="#消息中间件-MOM" class="headerlink" title="消息中间件(MOM)"></a>消息中间件(MOM)</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">利用高效可靠的消息传递机制进行平台无关的数据交流，并基于数据通信来进行分布式系统的集成。</span><br><span class="line">面向消息的中间件（MOM），提供了以松散耦合的灵活方式集成应用程序的一种机制。</span><br></pre></td></tr></table></figure><h3 id="常见消息中间件"><a href="#常见消息中间件" class="headerlink" title="常见消息中间件"></a>常见消息中间件</h3><h4 id="（1）ActiveMQ"><a href="#（1）ActiveMQ" class="headerlink" title="（1）ActiveMQ"></a>（1）ActiveMQ</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ActiveMQ 是Apache出品，最流行的，能力强劲的开源消息总线。</span><br><span class="line">ActiveMQ 是一个完全支持JMS1.1和J2EE 1.4规范的 JMS Provider实现。</span><br></pre></td></tr></table></figure><h4 id="（2）RabbitMQ"><a href="#（2）RabbitMQ" class="headerlink" title="（2）RabbitMQ"></a>（2）RabbitMQ</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AMQP协议的领导实现，支持多种场景。淘宝的MySQL集群内部有使用它进行通讯，</span><br><span class="line">OpenStack开源云平台的通信组件，最先在金融行业得到运用。</span><br></pre></td></tr></table></figure><h4 id="（3）ZeroMQ"><a href="#（3）ZeroMQ" class="headerlink" title="（3）ZeroMQ"></a>（3）ZeroMQ</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">史上最快的消息队列系统</span><br></pre></td></tr></table></figure><h4 id="（4）Kafka"><a href="#（4）Kafka" class="headerlink" title="（4）Kafka"></a>（4）Kafka</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Apache下的一个子项目</span><br><span class="line">特点：</span><br><span class="line">高吞吐，在一台普通的服务器上既可以达到10W/s的吞吐速率；</span><br><span class="line">完全的分布式系统。适合处理海量数据。</span><br></pre></td></tr></table></figure><h3 id="消息中间件的传递模式"><a href="#消息中间件的传递模式" class="headerlink" title="消息中间件的传递模式"></a>消息中间件的传递模式</h3><h4 id="点对点模式-Queue"><a href="#点对点模式-Queue" class="headerlink" title="点对点模式(Queue)"></a>点对点模式(Queue)</h4><h5 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Point-to-Point(P2P)我们很容易理解，即生产者和消费者之间的消息往来。</span><br><span class="line">每个消息都被发送到特定的消息队列，接收者从队列中获取消息。队列保留着消息，直到他们被消费或超时。</span><br></pre></td></tr></table></figure><h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5><ol><li>每个消息只有一个消费者（Consumer）(即一旦被消费，消息就不再在消息队列中)；</li><li>发送者和接收者之间在时间上没有依赖性，也就是说当发送者发送了消息之后，不管接收者有没有正在运行，它不会影响到消息被发送到队列；</li><li>接收者在成功接收消息之后需向队列应答成功。</li></ol><h4 id="Pub-Sub模式-发布-订阅—Topic"><a href="#Pub-Sub模式-发布-订阅—Topic" class="headerlink" title="Pub/Sub模式(发布-订阅—Topic)"></a>Pub/Sub模式(发布-订阅—Topic)</h4><h5 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类似广播</span><br></pre></td></tr></table></figure><h5 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h5><ol><li>每个消息可以有多个消费者；</li><li>发布者和订阅者之间有时间上的依赖性。针对某个主题（Topic）的订阅者，它必须创建一个订阅者之后，才能消费发布者的消息，而且为了消费消息，订阅者必须保持运行的状态；</li></ol><h2 id="JMS协议"><a href="#JMS协议" class="headerlink" title="JMS协议"></a>JMS协议</h2><h3 id="概念-3"><a href="#概念-3" class="headerlink" title="概念"></a>概念</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JMS是Java Message Service的缩写，即Java消息服务</span><br></pre></td></tr></table></figure><h3 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h3><p><strong>1、定义一组消息公用概念和实用工具</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">所有Java应用程序都可以使用JMS中定义的API去完成消息的创建、接收与发送，任何实现了JMS标准的MOM都可以作为消息的中介，完成消息的存储转发</span><br></pre></td></tr></table></figure><p><strong>2、最大化消息应用程序的可移植性</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MOM提供了有保证的消息发送，应用程序开发人员无需了解远程过程调用（RPC）和网络/通信协议的细节，提供了程序的可移植性</span><br></pre></td></tr></table></figure><p><strong>3、最大化降低应用程序与应用程序之间的耦合度</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">由于MOM的存在，各个应用程序只关心和MOM之间如何进行消息的接收与发送，而无须关注MOM的另一边，其他程序是如何接收和发送的</span><br><span class="line"></span><br><span class="line">JMS定义了一套通用的接口和相关语义，提供了诸如持久、验证和事务的消息服务，它最主要的目的是允许Java应用程序访问现有的消息中间件。JMS规范没有指定在消息节点间所使用的通讯底层协议，来保证应用开发人员不用与其细节打交道，一个特定的JMS实现可能提供基于TCP/IP、HTTP、UDP或者其它的协议。</span><br><span class="line"></span><br><span class="line">由于没有统一的规范和标准，基于消息中间件的应用不可移植，不同的消息中间件也不能互操作，这大大阻碍了消息中间件的发展。 Java Message Service(JMS, Java消息服务)是SUN及其伙伴公司提出的旨在统一各种消息中间件系统接口的规范。</span><br><span class="line"></span><br><span class="line">目前许多厂商采用并实现了JMS API，现在，JMS产品能够为企业提供一套完整的消息传递功能，目前我们看到的比较流行的JMS商业软件和开源产品：WebLogic、SonicMQ、ActiveMQ、OpenJMS都是基于JMS规范的实现</span><br></pre></td></tr></table></figure><h3 id="JMS消息模型"><a href="#JMS消息模型" class="headerlink" title="JMS消息模型"></a>JMS消息模型</h3><ol><li>消息头（header）：JMS消息头包含了许多字段，它们是消息发送后由JMS提供者或消息发送者产生，用来表示消息、设置优先权和失效时间等等，并且为消息确定路由。</li><li>属性（property）：由消息发送者产生，用来添加删除消息头以外的附加信息。</li><li>消息体（body）：由消息发送者产生，JMS中定义了5种消息体：ByteMessage、MapMessage、ObjectMessage、StreamMessage和TextMessage。</li></ol><h3 id="JMS标准详情"><a href="#JMS标准详情" class="headerlink" title="JMS标准详情"></a>JMS标准详情</h3><table><thead><tr><th>JMS标准</th><th>点对点模式</th><th>发布/订阅模式</th></tr></thead><tbody><tr><td>ConnectionFactory</td><td>QueueConnectionFactory</td><td>TopicConnectionFactory</td></tr><tr><td>Connection</td><td>QueueConnection</td><td>TopicConnection</td></tr><tr><td>Destination</td><td>Queue</td><td>Topic</td></tr><tr><td>Session</td><td>QueueSession</td><td>TopicSession</td></tr><tr><td>MessageProducer</td><td>QueueSender</td><td>TopicPublisher</td></tr><tr><td>MessageConsumer</td><td>QueueReceiver</td><td>TopicSubscriber</td></tr></tbody></table><h3 id="API解释"><a href="#API解释" class="headerlink" title="API解释"></a>API解释</h3><table><thead><tr><th>要 素</th><th>作 用</th></tr></thead><tbody><tr><td>Destination</td><td>表示消息所走通道的目标定义，用来定义消息从发送端发出后要走的通道，而不是接收方。Destination属于管理类对象</td></tr><tr><td>ConnectionFactory</td><td>顾名思义，用于创建连接对象，ConnectionFactory属于管理类的对象</td></tr><tr><td>Connection</td><td>连接接口，所负责的重要工作是创建Session</td></tr><tr><td>Session</td><td>会话接口，这是一个非常重要的对象，消息发送者、消息接收者以及消息对象本身，都是通过这个会话对象创建的</td></tr><tr><td>MessageConsumer</td><td>消息的消费者，也就是订阅消息并处理消息的对象</td></tr><tr><td>MessageProducer</td><td>消息的生产者，也就是用来发送消息的对象</td></tr><tr><td>XXXMessage</td><td>指各种类型的消息对象，包括ByteMesage、ObjectMessage、StreamMessage和TextMessage这5种</td></tr></tbody></table><h3 id="Message类型"><a href="#Message类型" class="headerlink" title="Message类型"></a>Message类型</h3><ul><li>TextMessage–一个字符串对象</li><li>MapMessage–一套名称-值对</li><li>ObjectMessage–一个序列化的 Java 对象</li><li>BytesMessage–一个字节的数据流</li><li>StreamMessage – Java 原始值的数据流</li></ul><h2 id="ActiveMQ-1"><a href="#ActiveMQ-1" class="headerlink" title="ActiveMQ"></a>ActiveMQ</h2><h3 id="使用ActiveMQ的原因-amp-ActiveMQ的特性"><a href="#使用ActiveMQ的原因-amp-ActiveMQ的特性" class="headerlink" title="使用ActiveMQ的原因&amp;ActiveMQ的特性"></a>使用ActiveMQ的原因&amp;ActiveMQ的特性</h3><h4 id="1-为什么用activemq"><a href="#1-为什么用activemq" class="headerlink" title="1. 为什么用activemq"></a><strong>1. 为什么用activemq</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在设计分布式应用程序时，应用程序间的耦合（或称集成）方式很重要。耦合意味着两个或者多个应用程序或系统的相互依赖关系。一种简单的方式是在所有的应用程序中从架构上设计他们与其他应用程序间的交叉实现。这样必然导致，一个应用程序的改变，直接导致另一个应用程序的改变。</span><br><span class="line"></span><br><span class="line">ActiveMQ采用松耦合方式，应用程序将消息发送给ActiveMQ而并不关心什么时间以何种方式消息投递给接收者。同样的，消息接收者也不会关心消息来源于哪里和消息是怎样投递给ActiveMQ的。对于多语言编写的复杂应用环境中，允许客户端使用不同的编程语言甚至不同的消息包装协议。ActiveMQ作为消息的中间件，允许复杂的多语言应用程序以一种一步的方式集成和交互。所以说，ActiveMQ是一种好的，提供松散耦合的，能够为多语言交叉应用提供集成的中间件。</span><br></pre></td></tr></table></figure><h4 id="2-什么时候用activemq"><a href="#2-什么时候用activemq" class="headerlink" title="2. 什么时候用activemq"></a><strong>2. 什么时候用activemq</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ActiveMQ的设计目标是提供标准的，面向消息的，能够跨越多语言和多系统的应用集成消息通信中间件。大多数情况下ActiveMQ被用于做系统之间的数据交换。</span><br><span class="line"></span><br><span class="line">只要是两个应用程序间需要通信的情况，都可以考虑使用JMS，不论这种通信是在本地的（就是通信的两个应用程序在同一台主机上），还是分布在不同机器上。尽管是在同一个主机上的两个应用程序需要通信也可以使用ActiveMQ。ActiveMQ可以确保消息投递成功并采用异步方式通信。</span><br></pre></td></tr></table></figure><h4 id="3-activemq特性"><a href="#3-activemq特性" class="headerlink" title="3. activemq特性"></a><strong>3. activemq特性</strong></h4><ol><li>支持JMS规范：ActiveMQ完全实现了JMS1.1规范。</li><li>连接方式的多样化：ActiveMQ提供了广泛的连接模式，包括HTTP/S、JGroups、JXTA、muticast、SSL、TCP、UDP、XMPP等。提供了如此多的连接模式表明了ActiveMQ具有较高的灵活性。</li><li>与其他的Java容器紧密集成：ActiveMQ提供了和其它流行的Java容器的结合，包括Apache Geronimo、Apache Tomcat、JBoss、Jetty等。</li><li>客户端API：ActiveMQ提供了多种客户端可访问的API，包括Java、C/C++，.NET，Perl、PHP、Python、Ruby等。当然，ActiveMQ中介必须运行在Java虚拟机中，但是使用它的客户端可以使用其他的语言来实现。</li><li>中介集群：多个ActiveMQ中介可以一起协同工作，来完成某项复杂的工作，这被称为网络型中介（network of brokers），这种类型的中介将会支持多种拓扑类型。</li></ol><h3 id="ActiveMQ-Demo"><a href="#ActiveMQ-Demo" class="headerlink" title="ActiveMQ-Demo"></a>ActiveMQ-Demo</h3><h4 id="maven-pom依赖"><a href="#maven-pom依赖" class="headerlink" title="maven-pom依赖"></a>maven-pom依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.activemq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activemq-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.14.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="ActiveMQ管理页面"><a href="#ActiveMQ管理页面" class="headerlink" title="ActiveMQ管理页面"></a>ActiveMQ管理页面</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">访问地址：http://127.0.0.1:8161/</span><br><span class="line">用户名：admin密码：admin</span><br><span class="line"><span class="attribute">Queues消息列表：</span></span><br><span class="line">Number Of Pending Messages  ：等待消费的消息 这个是当前未出队列的数量。</span><br><span class="line">Number Of Consumers  ：消费者 这个是消费者端的消费者数量</span><br><span class="line">Messages Enqueued  ：进入队列的消息  进入队列的总数量,包括出队列的。</span><br><span class="line">Messages Dequeued  ：出了队列的消息  可以理解为是消费这消费掉的数量。</span><br></pre></td></tr></table></figure><h4 id="发送-amp-接收消息开发步骤"><a href="#发送-amp-接收消息开发步骤" class="headerlink" title="发送&amp;接收消息开发步骤"></a>发送&amp;接收消息开发步骤</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//发送&amp;接收消息的9个步骤</span></span><br><span class="line"><span class="comment">//1.创建连接工厂</span></span><br><span class="line"><span class="comment">//2.获取连接</span></span><br><span class="line"><span class="comment">//3.启动连接</span></span><br><span class="line"><span class="comment">//4.获取session</span></span><br><span class="line"><span class="comment">//5.创建队列对象</span></span><br><span class="line"><span class="comment">//6.创建消息生产者对象或消费者</span></span><br><span class="line"><span class="comment">//7.创建消息    //接受消息setMessageListener</span></span><br><span class="line"><span class="comment">//8.使用生成者发送消息   //等待键盘输入System.in.read();</span></span><br><span class="line"><span class="comment">//9.关闭资源</span></span><br></pre></td></tr></table></figure><h4 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h4><h5 id="Queue点对点生产者发送message"><a href="#Queue点对点生产者发送message" class="headerlink" title="Queue点对点生产者发送message"></a>Queue点对点生产者发送message</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.创建连接工厂</span></span><br><span class="line">ActiveMQConnectionFactory connectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(<span class="string">"tcp:127.0.0.1:61616"</span>);</span><br><span class="line"><span class="comment">//2.获取连接</span></span><br><span class="line">Connection connection = connectionFactory.createConnection();</span><br><span class="line"><span class="comment">//3.启动连接</span></span><br><span class="line">connection.start();</span><br><span class="line"><span class="comment">//4.获取session</span></span><br><span class="line">Session session = connection.createSession(<span class="keyword">false</span>,Session.AUTO_ACKNOWLEDGE);</span><br><span class="line"><span class="comment">//5.创建队列对象</span></span><br><span class="line">Queue queue = session.createQueue(<span class="string">"test-queue"</span>);</span><br><span class="line"><span class="comment">//6.创建消息生产者对象或消费者</span></span><br><span class="line">MessageProducer producer = session.createProducer(queue);</span><br><span class="line"><span class="comment">//7.创建消息</span></span><br><span class="line">TextMessage textMessage = session.createTextMessage(<span class="string">"欢迎来到品优购的世界"</span>);</span><br><span class="line"><span class="comment">//8.使用生成者发送消息</span></span><br><span class="line">producer.send(textMessage);</span><br><span class="line"><span class="comment">//9.关闭资源</span></span><br><span class="line">producer.close();</span><br><span class="line">session.close();</span><br><span class="line">connection.close();</span><br></pre></td></tr></table></figure><h5 id="Queue点对点消费者接收message"><a href="#Queue点对点消费者接收message" class="headerlink" title="Queue点对点消费者接收message"></a>Queue点对点消费者接收message</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.创建连接工厂</span></span><br><span class="line">ActiveMQConnectionFactory connectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(<span class="string">"tcp:127.0.0.1:61616"</span>);</span><br><span class="line"><span class="comment">//2.获取连接</span></span><br><span class="line">Connection connection = connectionFactory.createConnection();</span><br><span class="line"><span class="comment">//3.启动连接</span></span><br><span class="line">connection.start();</span><br><span class="line"><span class="comment">//4.获取session</span></span><br><span class="line">Session session = connection.createSession();</span><br><span class="line"><span class="comment">//5.创建队列对象</span></span><br><span class="line">Queue queue = session.createQueue(<span class="string">"test-queue"</span>);</span><br><span class="line"><span class="comment">//6.创建消息生产者对象或消费者</span></span><br><span class="line">MessageConsumer consumer = session.createConsumer(queue);</span><br><span class="line"><span class="comment">//7.接受消息setMessageListener</span></span><br><span class="line">consumer.setMessageLinstener(<span class="keyword">new</span> MessageListener()&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message)</span></span>&#123;</span><br><span class="line">        <span class="comment">//获取文本消息对象</span></span><br><span class="line">        TextMessage textMessage = (TextMessage) message;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//提取文本</span></span><br><span class="line">            String text = textMessage.getText();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(JMSException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//8.等待键盘输入System.in.read();</span></span><br><span class="line">System.in.read();</span><br><span class="line"><span class="comment">//9.关闭资源</span></span><br><span class="line">consumer.close();</span><br><span class="line">session.close();</span><br><span class="line">connection.close();</span><br></pre></td></tr></table></figure><h4 id="Topic"><a href="#Topic" class="headerlink" title="Topic"></a>Topic</h4><h5 id="Topic订阅生产者广播Message"><a href="#Topic订阅生产者广播Message" class="headerlink" title="Topic订阅生产者广播Message"></a>Topic订阅生产者广播Message</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.创建连接工厂</span></span><br><span class="line">ActiveMQConnectionFactory connectionFactory = <span class="keyword">new</span> ActiveMQConectionFactory();</span><br><span class="line"><span class="comment">//2.获取连接</span></span><br><span class="line">Connection connection = connectionFactory.createConnection();</span><br><span class="line"><span class="comment">//3.启动连接</span></span><br><span class="line">connection.start();</span><br><span class="line"><span class="comment">//4.获取session</span></span><br><span class="line">Session session = connection.createSession(<span class="keyword">false</span>,Session.AUTO_ACKNOWLEDGE);</span><br><span class="line"><span class="comment">//5.创建一个订阅</span></span><br><span class="line">Topic topic = session.createTopic(<span class="string">"test-topic"</span>);</span><br><span class="line"><span class="comment">//6.创建消息生产者</span></span><br><span class="line">MessageProducer producer = session.createProducer(topic);</span><br><span class="line"><span class="comment">//7.创建消息</span></span><br><span class="line">TextMessage textMessage = session.createTextMessage(<span class="string">"您的手机没话费了"</span>);</span><br><span class="line"><span class="comment">//8.使用生成者发送消息</span></span><br><span class="line">producer.send(textMessage);</span><br><span class="line"><span class="comment">//9.关闭资源</span></span><br><span class="line">producer.close();</span><br><span class="line">session.close();</span><br><span class="line">connection.close();</span><br></pre></td></tr></table></figure><h5 id="Topic订阅消费者接收Message"><a href="#Topic订阅消费者接收Message" class="headerlink" title="Topic订阅消费者接收Message"></a>Topic订阅消费者接收Message</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.创建连接工厂</span></span><br><span class="line">ActiveMQConnectionFactory connectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(<span class="string">"tcp://127.0.0.1:61616"</span>);</span><br><span class="line"><span class="comment">//2.获取连接</span></span><br><span class="line">Connection connection = connectionFactory.createConnection();</span><br><span class="line"><span class="comment">//3.启动连接</span></span><br><span class="line">connection.start();</span><br><span class="line"><span class="comment">//4.获取session</span></span><br><span class="line">Session session = connection.createSession(<span class="keyword">false</span>,Session.AUTO_ACKNOWLEDGE);</span><br><span class="line"><span class="comment">//5.创建队列对象</span></span><br><span class="line">Topic topic = session.createTopic(<span class="string">"test-topic"</span>);</span><br><span class="line"><span class="comment">//6.创建订阅消费者</span></span><br><span class="line">Consumer consumer = session.createConsumer(topic);</span><br><span class="line"><span class="comment">//7.接受消息setMessageListener</span></span><br><span class="line">consumer.setMessageLinstener(<span class="keyword">new</span> MessageListener()&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message)</span></span>&#123;</span><br><span class="line">        TextMessage = (TextMessage) message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//8.等待键盘输入System.in.read();</span></span><br><span class="line">System.in.read();</span><br><span class="line"><span class="comment">//9.关闭资源</span></span><br><span class="line">consumer.close();</span><br><span class="line">session.close();</span><br><span class="line">connection.close();</span><br></pre></td></tr></table></figure><h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Topic消息的消费方必须先于消息的生产方启动才可以正常接收到消息</span><br><span class="line">因为Topic发送方会根据注册的情况主动把消息推送到订阅过该消息的消费者。</span><br><span class="line">先启动接收方，接收方会去ActiveMQ的客户端注册，注册过后消息的发送方会创建两个临时消息生产者把消息推送到消息的在客户端注册过的接收方</span><br></pre></td></tr></table></figure><h3 id="ActiveMQ的消息选择器"><a href="#ActiveMQ的消息选择器" class="headerlink" title="ActiveMQ的消息选择器"></a>ActiveMQ的消息选择器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">生产者在header或properties中添加应用程序特有的属性，消费者根据属性的值来选择是否接收消息（过滤）。</span><br><span class="line">语法和使用规范：</span><br><span class="line">生产者：</span><br><span class="line">可接收的类型包括：<span class="keyword">byte</span>,<span class="keyword">int</span>,<span class="keyword">double</span>,<span class="keyword">boolean</span>,String;</span><br><span class="line">具体代码实现：</span><br><span class="line">TextMessage message = session.createTextMessage();</span><br><span class="line">message.setIntProperty(<span class="string">"test"</span>,<span class="number">2</span>);</span><br><span class="line">message.setText(<span class="string">"test"</span>);</span><br><span class="line"></span><br><span class="line">消费者：</span><br><span class="line">具体代码实现：</span><br><span class="line">consumer = session.createConsumer(destination,<span class="string">"test &gt; 2"</span>);</span><br><span class="line">消费者的拦截器中的部分可以写条件表达式、算术表达式、比较运算符( = , &gt; , &gt;= , &lt; , &lt;= , &lt;&gt;)和逻辑运算符(NOT , AND , OR)组成的表达式：</span><br><span class="line">session.createConsumer(destination,<span class="string">"name IS NULL"</span>);</span><br><span class="line">session.createConsumer(destination,<span class="string">"name IS NOT NULL"</span>);</span><br><span class="line">session.createConsumer(destination,<span class="string">"age BETWEEN 20 AND 30"</span>);</span><br><span class="line">session.createConsumer(destination,<span class="string">"address NOT IN ('US','UK','France')"</span>);</span><br><span class="line">属性标识符要么在heads中定义 要么在 properties中定义，如果在sender中是在heads中定义而receiver中却从properties中寻找的话，找不到的情况下他是不会自动去heads中寻找的，而是会返回<span class="keyword">null</span>；</span><br></pre></td></tr></table></figure><h3 id="ActiveMQ的消息确认机制"><a href="#ActiveMQ的消息确认机制" class="headerlink" title="ActiveMQ的消息确认机制"></a>ActiveMQ的消息确认机制</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">jms消息只有在被消费者确认之后才会认为成功消费了这条消息。</span><br><span class="line">消息的成功消费通常包括三个步骤：</span><br><span class="line">（1）client接收消息</span><br><span class="line">（2）client处理消息</span><br><span class="line">（3）消息被确认（也就是client确认消息）</span><br></pre></td></tr></table></figure><h4 id="事务性会话"><a href="#事务性会话" class="headerlink" title="事务性会话"></a>事务性会话</h4><p><code>在事务性会话中当一个事务被提交的时候，确认自动发生。（ps:异步消息接收中不能使用事务性会话）。</code></p><h4 id="非事务性会话"><a href="#非事务性会话" class="headerlink" title="非事务性会话"></a>非事务性会话</h4><p><code>在非事务性会话中消息何时被确认取决于创建的session中设置的消息应答模式（acknowledge model）</code></p><h5 id="acknowledge-model的三个值，（三种确认模式）"><a href="#acknowledge-model的三个值，（三种确认模式）" class="headerlink" title="acknowledge model的三个值，（三种确认模式）"></a>acknowledge model的三个值，（三种确认模式）</h5><h6 id="Session-AUTO-ACKNOWLEDGE："><a href="#Session-AUTO-ACKNOWLEDGE：" class="headerlink" title="Session.AUTO_ACKNOWLEDGE："></a>Session.AUTO_ACKNOWLEDGE：</h6><p><code>当client端成功的从receive方法或从onMessage(Message message) 方法返回的时候，会话自动确认client收到消息。</code></p><h6 id="Session-CLIENT-ACKNOWLEDGE"><a href="#Session-CLIENT-ACKNOWLEDGE" class="headerlink" title="Session.CLIENT_ACKNOWLEDGE:"></a>Session.CLIENT_ACKNOWLEDGE:</h6><p><code>客户单通过调用acknowledge方法来确认客户端收到消息。但需要注意在这种应答模式下，确认是在会话层上进行的，确认一个被消费的消息将自动确认所有已消费的其他消息。比如一个消费者已经消费了10条消息，然后确认了第5条消息被消费，则这10条都被确认消费了。</code>        </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//acknowledge（）通知方法是在Message对象上:</span></span><br><span class="line">    <span class="comment">//同步接收，调用acknowledge（）方法进行确认：</span></span><br><span class="line">        consumer = session.createConsumer(queue); </span><br><span class="line">        Message message = consumer.receive(); </span><br><span class="line">        message.acknowledge();</span><br><span class="line"><span class="comment">//异步接收，调用acknowledge（）方法进行确认：</span></span><br><span class="line">        consumer.setMessageListener(<span class="keyword">new</span> MessageListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">                TextMessage textMessage = (TextMessage) message;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    String value = textMessage.getText();</span><br><span class="line">                    System.out.println(<span class="string">"value: "</span> + value);</span><br><span class="line">                    message.acknowledge(); <span class="comment">//消息消费确认通知</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h6 id="Session-DUPS-ACKNOWLEDGE："><a href="#Session-DUPS-ACKNOWLEDGE：" class="headerlink" title="Session.DUPS_ACKNOWLEDGE："></a>Session.DUPS_ACKNOWLEDGE：</h6><p><code>不是必须签收，消息可能会重复发送。在第二次重新传送消息的时候，消息头的JmsDelivered会被置为true标示当前消息已经传送过一次，客户端需要进行消息的重复处理控制。</code></p><h3 id="JMS消息的持久化"><a href="#JMS消息的持久化" class="headerlink" title="JMS消息的持久化"></a>JMS消息的持久化</h3><p><code>JMS 支持以下两种消息提交模式：PERSISTENT,NON_PERSISTENT</code></p><h4 id="PERSISTENT"><a href="#PERSISTENT" class="headerlink" title="PERSISTENT"></a>PERSISTENT</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">是activemq默认的传送方式，此方式下的消息在配合activemq.xml中配置的消息存储方式，会被存储在特定的地方，直到有消费者将消息消费或者消息过期进入DLQ队列，消息生命周期才会结束。此模式下可以保证消息只会被成功传送一次和成功使用一次，消息具有可靠性。在消息传递到目标消费者，在消费者没有成功应答前，消息不会丢失。所以很自然的，需要一个地方来持久性存储。如果消息消费者在进行消费过程发生失败，则消息会被再次投递。</span><br><span class="line"></span><br><span class="line">DeliveryMode.PERSISTENT 指示JMS provider持久保存消息，以保证消息不会因为JMS provider的失败而丢失。 消息持久化在硬盘中，ActiveMQ持久化有三种方式：AMQ、KahaDB、JDBC。</span><br></pre></td></tr></table></figure><h5 id="ActiveMQ持久化的三种方式"><a href="#ActiveMQ持久化的三种方式" class="headerlink" title="ActiveMQ持久化的三种方式"></a>ActiveMQ持久化的三种方式</h5><h6 id="AMQ"><a href="#AMQ" class="headerlink" title="AMQ"></a>AMQ</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AMQ是一种文件存储形式，它具有写入速度快和容易恢复的特点。消息存储在一个个文件中，文件的默认大小为32M，如果一条消息的大小超过了32M，那么这个值必须设置大一点。当一个存储文件中的消息已经全部被消费，那么这个文件将被标识为可删除，在下一个清除阶段，这个文件被删除。AMQ适用于ActiveMQ5.3之前的版本。</span><br></pre></td></tr></table></figure><h6 id="KahaDB"><a href="#KahaDB" class="headerlink" title="KahaDB"></a>KahaDB</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">KahaDB是基于文件的本地数据库储存形式，虽然没有AMQ的速度快，但是它具有强扩展性，恢复的时间比AMQ短，从5.4版本之后KahaDB做为默认的持久化方式。</span><br></pre></td></tr></table></figure><h6 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可以将消息存储到数据库中，例如：Mysql、SQL Server、Oracle、DB2。</span><br></pre></td></tr></table></figure><h4 id="NON-PERSISTENT"><a href="#NON-PERSISTENT" class="headerlink" title="NON_PERSISTENT"></a><strong>NON_PERSISTENT</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">非持久的消息适用于不重要的，可以接受消息丢失的哪一类消息，这种消息只会被投递一次，消息不会在持久性存储中存储，也不会保证消息丢失后的重新投递。</span><br><span class="line"></span><br><span class="line">DeliveryMode.NON_PERSISTENT 不要求JMS provider持久保存消息，消息存放在内存中，读写速度快，在JMS服务停止后消息会消失，没有持久化到硬盘。</span><br></pre></td></tr></table></figure><h4 id="ActiveMQ的持久化"><a href="#ActiveMQ的持久化" class="headerlink" title="ActiveMQ的持久化"></a>ActiveMQ的持久化</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">发送者将消息发送出去后，消息中心首先将消息存储到本地数据文件、内存数据库或者远程数据库等，然后试图将消息发送给接收者，发送成功则将消息从存储中删除，失败则继续尝试。</span><br><span class="line"></span><br><span class="line">消息中心启动以后首先要检查指定的存储位置，如果有未发送成功的消息，则需要把消息发送出去。</span><br><span class="line"></span><br><span class="line">配置持久化的方式，都是修改安装目录下conf/activemq.xml文件</span><br></pre></td></tr></table></figure><h5 id="JDBC方式"><a href="#JDBC方式" class="headerlink" title="JDBC方式"></a>JDBC方式</h5><p><code>使用JDBC持久化方式，数据库会创建3个表：activemq_msgs，activemq_acks和activemq_lock。 activemq_msgs用于存储消息，Queue和Topic都存储在这个表中。</code></p><h6 id="conf-activemq-xml"><a href="#conf-activemq-xml" class="headerlink" title="conf/activemq.xml"></a>conf/activemq.xml</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">persistenceAdapter</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">jdbcPersistenceAdapter</span> <span class="attr">dataSource</span>=<span class="string">"dataSource"</span> <span class="attr">createTablesOnStartup</span>=<span class="string">"false"</span> /&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">persistenceAdapter</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>dataSource指定持久化数据库的bean，createTablesOnStartup是否在启动的时候创建数据表，默认值是true，这样每次启动都会去创建数据表了，一般是第一次启动的时候设置为true，之后改成false。</code></p><h6 id="数据库表信息"><a href="#数据库表信息" class="headerlink" title="数据库表信息"></a>数据库表信息</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">activemq_msgs用于存储消息，Queue和Topic都存储在这个表中：</span><br><span class="line">ID：自增的数据库主键</span><br><span class="line">CONTAINER：消息的Destination</span><br><span class="line">MSGID_PROD：消息发送者客户端的主键</span><br><span class="line">MSG_SEQ：是发送消息的顺序，MSGID_PROD+MSG_SEQ可以组成JMS的MessageID</span><br><span class="line">EXPIRATION：消息的过期时间，存储的是从1970-01-01到现在的毫秒数</span><br><span class="line">MSG：消息本体的Java序列化对象的二进制数据</span><br><span class="line">PRIORITY：优先级，从0-9，数值越大优先级越高</span><br><span class="line"></span><br><span class="line">activemq_acks用于存储订阅关系。如果是持久化Topic，订阅者和服务器的订阅关系在这个表保存：</span><br><span class="line">主要的数据库字段如下：</span><br><span class="line">CONTAINER：消息的Destination</span><br><span class="line">SUB_DEST：如果是使用Static集群，这个字段会有集群其他系统的信息</span><br><span class="line">CLIENT_ID：每个订阅者都必须有一个唯一的客户端ID用以区分</span><br><span class="line">SUB_NAME：订阅者名称</span><br><span class="line">SELECTOR：选择器，可以选择只消费满足条件的消息。条件可以用自定义属性实现，可支持多属性AND和OR操作</span><br><span class="line">LAST_ACKED_ID：记录消费过的消息的ID。</span><br><span class="line"></span><br><span class="line">表activemq_lock在集群环境中才有用，只有一个Broker可以获得消息，称为Master Broker，</span><br><span class="line">其他的只能作为备份等待Master Broker不可用，才可能成为下一个Master Broker。</span><br><span class="line">这个表用于记录哪个Broker是当前的Master Broker。</span><br></pre></td></tr></table></figure><h5 id="AMQ方式"><a href="#AMQ方式" class="headerlink" title="AMQ方式"></a>AMQ方式</h5><p><code>性能高于JDBC，写入消息时，会将消息写入日志文件，由于是顺序追加写，性能很高。为了提升性能，创建消息主键索引，并且提供缓存机制，进一步提升性能。每个日志文件的大小都是有限制的（默认32m，可自行配置）。 当超过这个大小，系统会重新建立一个文件。当所有的消息都消费完成，系统会删除这个文件或者归档（取决于配置）。</code></p><p> <code>主要的缺点是AMQ Message会为每一个Destination创建一个索引，如果使用了大量的Queue，索引文件的大小会占用很多磁盘空间。 而且由于索引巨大，一旦Broker崩溃，重建索引的速度会非常慢。</code></p><p><code>虽然AMQ性能略高于Kaha DB方式，但是由于其重建索引时间过长，而且索引文件占用磁盘空间过大，所以已经不推荐使用。</code></p><h6 id="conf-activemq-xml-1"><a href="#conf-activemq-xml-1" class="headerlink" title="conf/activemq.xml"></a>conf/activemq.xml</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">persistenceAdapter</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">amqPersistenceAdapter</span> <span class="attr">directory</span>=<span class="string">"$&#123;activemq.data&#125;/activemq-data"</span> <span class="attr">maxFileLength</span>=<span class="string">"32mb"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">persistenceAdapter</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="KahaDB方式"><a href="#KahaDB方式" class="headerlink" title="KahaDB方式"></a>KahaDB方式</h5><p><code>KahaDB是从ActiveMQ 5.4开始默认的持久化插件，也是我们项目现在使用的持久化方式。</code></p><p><code>KahaDb恢复时间远远小于其前身AMQ并且使用更少的数据文件，所以可以完全代替AMQ。</code><br><code>kahaDB的持久化机制同样是基于日志文件，索引和缓存。</code></p><h6 id="conf-activemq-xml-2"><a href="#conf-activemq-xml-2" class="headerlink" title="conf/activemq.xml"></a>conf/activemq.xml</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">persistenceAdapter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">kahaDB</span> <span class="attr">directory</span>=<span class="string">"$&#123;activemq.data&#125;/activemq-data"</span> <span class="attr">journalMaxFileLength</span>=<span class="string">"16mb"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">persistenceAdapter</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>directory : 指定持久化消息的存储目录</code><br><code>journalMaxFileLength : 指定保存消息的日志文件大小，具体根据你的实际应用配置</code></p><h6 id="KahaDB支持的属性"><a href="#KahaDB支持的属性" class="headerlink" title="KahaDB支持的属性"></a>KahaDB支持的属性</h6><table><thead><tr><th>属性名称</th><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>directory</td><td>activemq-data</td><td>消息文件和日志的存储目录</td></tr><tr><td>indexWriteBatchSize</td><td>1000</td><td>一批索引的大小，当要更新的索引量到达这个值时，更新到消息文件中</td></tr><tr><td>indexCacheSize</td><td>1000</td><td>内存中，索引的页大小</td></tr><tr><td>enableIndexWriteAsync</td><td>false</td><td>索引是否异步写到消息文件中</td></tr><tr><td>journalMaxFileLength</td><td>32mb</td><td>一个消息文件的大小</td></tr><tr><td>enableJournalDiskSyncs</td><td>true</td><td>是否讲非事务的消息同步写入到磁盘</td></tr><tr><td>cleanupInterval</td><td>30000</td><td>清除操作周期，单位ms</td></tr><tr><td>checkpointInterval</td><td>5000</td><td>索引写入到消息文件的周期，单位ms</td></tr><tr><td>ignoreMissingJournalfiles</td><td>false</td><td>忽略丢失的消息文件，false，当丢失了消息文件，启动异常</td></tr><tr><td>checkForCorruptJournalFiles</td><td>false</td><td>检查消息文件是否损坏，true，检查发现损坏会尝试修复</td></tr><tr><td>checksumJournalFiles</td><td>false</td><td>产生一个checksum，以便能够检测journal文件是否损坏。</td></tr><tr><td>5.4版本之后有效的属性:</td><td></td><td></td></tr><tr><td>archiveDataLogs</td><td>false</td><td>当为true时，归档的消息文件被移到directoryArchive,而不是直接删除</td></tr><tr><td>directoryArchive</td><td>null</td><td>存储被归档的消息文件目录</td></tr><tr><td>databaseLockedWaitDelay</td><td>10000</td><td>在使用负载时，等待获得文件锁的延迟时间，单位ms</td></tr><tr><td>maxAsyncJobs</td><td>10000</td><td>同个生产者产生等待写入的异步消息最大量</td></tr><tr><td>concurrentStoreAndDispatchTopics</td><td>false</td><td>当写入消息的时候，是否转发主题消息</td></tr><tr><td>concurrentStoreAndDispatchQueues</td><td>true</td><td>当写入消息的时候，是否转发队列消息</td></tr><tr><td>5.6版本之后有效的属性:</td><td></td><td></td></tr><tr><td>archiveCorruptedIndex</td><td>false</td><td>是否归档错误的索引</td></tr></tbody></table><h6 id="KahaDB主要特性"><a href="#KahaDB主要特性" class="headerlink" title="KahaDB主要特性"></a>KahaDB主要特性</h6><ol><li>日志形式存储消息； </li><li>消息索引以B-Tree结构存储，可以快速更新；</li><li>完全支持JMS事务； </li><li>支持多种恢复机制； </li></ol><h6 id="KahaDB的结构"><a href="#KahaDB的结构" class="headerlink" title="KahaDB的结构"></a>KahaDB的结构</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">消息存储在基于文件的数据日志中。如果消息发送成功，变标记为可删除的。系统会周期性的清除或者归档日志文件。 消息文件的位置索引存储在内存中，这样能快速定位到。定期将内存中的消息索引保存到metadata store中，避免大量消息未发送时，消息索引占用过多内存空间。</span><br></pre></td></tr></table></figure><p><img src="C:%5CUsers%5C%E9%AB%98%E6%BA%90%5CDesktop%5Cactivemq%E6%8C%81%E4%B9%85%E5%8C%96%E7%9A%84KahaDB%E6%96%B9%E5%BC%8F%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.gif" alt="activemq持久化的KahaDB方式的存储结构"></p><p><strong>Data logs：</strong><br>Data logs用于存储消息日志，消息的全部内容都在Data logs中。<br>同AMQ一样，一个Data logs文件大小超过规定的最大值，会新建一个文件。同样是文件尾部追加，写入性能很快。<br>每个消息在Data logs中有计数引用，所以当一个文件里所有的消息都不需要了，系统会自动删除文件或放入归档文件夹。</p><p><strong>Metadata cache ：</strong><br>缓存用于存放在线消费者的消息。如果消费者已经快速的消费完成，那么这些消息就不需要再写入磁盘了。<br>Btree索引会根据MessageID创建索引，用于快速的查找消息。这个索引同样维护持久化订阅者与Destination的关系，以及每个消费者消费消息的指针。</p><p><strong>Metadata store</strong><br>在db.data文件中保存消息日志中消息的元数据，也是以B-Tree结构存储的，定时从Metadata cache更新数据。Metadata store中也会备份一些在消息日志中存在的信息，这样可以让Broker实例快速启动。<br>即便metadata store文件被破坏或者误删除了。broker可以读取Data logs恢复过来，只是速度会相对较慢些。</p><h5 id="LevelDB方式"><a href="#LevelDB方式" class="headerlink" title="LevelDB方式"></a>LevelDB方式</h5><p>从ActiveMQ 5.6版本之后，又推出了LevelDB的持久化引擎。 目前默认的持久化方式仍然是KahaDB，不过LevelDB持久化性能高于KahaDB，可能是以后的趋势。 在ActiveMQ 5.9版本提供了基于LevelDB和Zookeeper的数据复制方式，用于Master-slave方式的首选数据复制方案。 </p><h2 id="spring整合ActiveMQ"><a href="#spring整合ActiveMQ" class="headerlink" title="spring整合ActiveMQ"></a>spring整合ActiveMQ</h2><h3 id="pom依赖"><a href="#pom依赖" class="headerlink" title="pom依赖"></a>pom依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.activemq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activemq-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.11.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="spring配置"><a href="#spring配置" class="headerlink" title="spring配置"></a>spring配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">基本概念</span></span><br><span class="line"><span class="comment">ConnectionFactory： 和jms服务器的连接, 可以是外部的jms server, 也可以使用embedded ActiveMQ Broker；</span></span><br><span class="line"><span class="comment">Destination： 有topic和queue两种方式；</span></span><br><span class="line"><span class="comment">JmsTemplate： spring提供的jms模板；</span></span><br><span class="line"><span class="comment">MessageConverter： 消息转换器；</span></span><br><span class="line"><span class="comment">MessageProducer： 消息生产者；</span></span><br><span class="line"><span class="comment">MessageConsumer： 消息消费者；</span></span><br><span class="line"><span class="comment">MessageListener： 消息监听器；</span></span><br><span class="line"><span class="comment">MessageListenerContainer： 消息监听容器。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Spring为我们听过了两种类型的MessageListenerContainer：SimpleMessageListenerContainer和DefaultMessageListenerContainer。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">SimpleMessageListenerContainer</span></span><br><span class="line"><span class="comment">会在一开始的时候就创建一个会话Session和消费者Consumer，并且会适用标准的JMS的MessageConsumer.setMessageListener()方法注册监听器让JMS提供调用监听器的回调函数。它不会动态的适应运行时需要和参与外部的事务管理。兼容性方面，它非常接近于独立的JMS规范，但一般不兼容J2EE的JMS限制。大多数情况下，我们还是使用DefaultMessageListenerContainer。</span></span><br><span class="line"><span class="comment">DefaultMessageListenerContainer</span></span><br><span class="line"><span class="comment">与SimpleMessageListenerContainer相比，它会动态的适应运行时的需求，并且能够参与外部的事务管理。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h3 id="整合Queue"><a href="#整合Queue" class="headerlink" title="整合Queue"></a>整合Queue</h3><h4 id="applicationContext-activemq-producer-xml"><a href="#applicationContext-activemq-producer-xml" class="headerlink" title="applicationContext-activemq-producer.xml"></a>applicationContext-activemq-producer.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:amq</span>=<span class="string">"http://activemq.apache.org/schema/core"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:jms</span>=<span class="string">"http://www.springframework.org/schema/jms"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context   </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/jms</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/jms/spring-jms.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.itcast.demo"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span>     </span><br><span class="line">   </span><br><span class="line">    <span class="comment">&lt;!-- 真正可以产生Connection的ConnectionFactory，由对应的 JMS服务厂商提供--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"targetConnectionFactory"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.ActiveMQConnectionFactory"</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"brokerURL"</span> <span class="attr">value</span>=<span class="string">"tcp://127.0.0.1:61616"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">    <span class="comment">&lt;!-- Spring用于管理真正的ConnectionFactory的ConnectionFactory --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"connectionFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jms.connection.SingleConnectionFactory"</span>&gt;</span>  </span><br><span class="line"><span class="comment">&lt;!-- 目标ConnectionFactory对应真实的可以产生JMS Connection的ConnectionFactory --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetConnectionFactory"</span> <span class="attr">ref</span>=<span class="string">"targetConnectionFactory"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </span><br><span class="line">   </span><br><span class="line">    <span class="comment">&lt;!-- Spring提供的JMS工具类，它可以进行消息发送、接收等 --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jmsTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jms.core.JmsTemplate"</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 这个connectionFactory对应的是我们定义的Spring提供的那个ConnectionFactory对象 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"connectionFactory"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>      </span><br><span class="line">    <span class="comment">&lt;!--这个是队列目的地，点对点的  文本信息--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"queueTextDestination"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.command.ActiveMQQueue"</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"queue_text"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>    </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--这个是订阅模式  文本信息--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"topicTextDestination"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.command.ActiveMQTopic"</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"topic_text"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="生产者QueueProducer"><a href="#生产者QueueProducer" class="headerlink" title="生产者QueueProducer"></a>生产者QueueProducer</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueueProducer</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JmsTemplate jmsTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Destination queueTextDestination;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendTextMessage</span><span class="params">(<span class="keyword">final</span> String text)</span></span>&#123;</span><br><span class="line">        jmsTemplate.send(queueTextDestination,<span class="keyword">new</span> MessageCreator()&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> Message <span class="title">createMessage</span><span class="params">(Session session)</span> <span class="keyword">throws</span> JMSException </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> session.createTextMessage(<span class="string">"spring与activeMQ整合"</span>+text);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="生产者测试TestQueue"><a href="#生产者测试TestQueue" class="headerlink" title="生产者测试TestQueue"></a>生产者测试TestQueue</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@ContextConfiguration</span>(locations = <span class="string">"classpath:applicationContext-activemq-producer.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestQueue</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> QueueProducer queueProducer;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendTextQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        queueProducer.sendTextMessage(<span class="string">"是可以的"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="applicationContext-activemq-consumer-xml"><a href="#applicationContext-activemq-consumer-xml" class="headerlink" title="applicationContext-activemq-consumer.xml"></a>applicationContext-activemq-consumer.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:amq</span>=<span class="string">"http://activemq.apache.org/schema/core"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:jms</span>=<span class="string">"http://www.springframework.org/schema/jms"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context   </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/jms</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/jms/spring-jms.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 真正可以产生Connection的ConnectionFactory，由对应的 JMS服务厂商提供--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"targetConnectionFactory"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.ActiveMQConnectionFactory"</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"brokerURL"</span> <span class="attr">value</span>=<span class="string">"tcp://127.0.0.1:61616"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">    <span class="comment">&lt;!-- Spring用于管理真正的ConnectionFactory的ConnectionFactory --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"connectionFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jms.connection.SingleConnectionFactory"</span>&gt;</span>  </span><br><span class="line"><span class="comment">&lt;!-- 目标ConnectionFactory对应真实的可以产生JMS Connection的ConnectionFactory --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetConnectionFactory"</span> <span class="attr">ref</span>=<span class="string">"targetConnectionFactory"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--这个是队列目的地，点对点的  文本信息--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"queueTextDestination"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.command.ActiveMQQueue"</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"queue_text"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>    </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--这个是订阅消息目的地，文本信息--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"topicTextDestination"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.command.ActiveMQTopic"</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"topic_text"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 我的监听类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myMessageListener"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.demo.MyMessageListener"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myTopicMessageListener"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.demo.MyTopicMessageListener"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myTopicMessageListener2"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.demo.MyTopicMessageListener2"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 消息监听容器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.jms.listener.DefaultMessageListenerContainer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"connectionFactory"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"destination"</span> <span class="attr">ref</span>=<span class="string">"queueTextDestination"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageListener"</span> <span class="attr">ref</span>=<span class="string">"myMessageListener"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.jms.listener.DefaultMessageListenerContainer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"connectionFactory"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"destination"</span> <span class="attr">ref</span>=<span class="string">"topicTextDestination"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageListener"</span> <span class="attr">ref</span>=<span class="string">"myTopicMessageListener"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.jms.listener.DefaultMessageListenerContainer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"connectionFactory"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"destination"</span> <span class="attr">ref</span>=<span class="string">"topicTextDestination"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageListener"</span> <span class="attr">ref</span>=<span class="string">"myTopicMessageListener2"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="消费者MessageListener"><a href="#消费者MessageListener" class="headerlink" title="消费者MessageListener"></a>消费者MessageListener</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageListener</span> <span class="keyword">implements</span> <span class="title">MessageLinstener</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message)</span></span>&#123;</span><br><span class="line">        TextMessage textMessage = (TextMessage) message;</span><br><span class="line">        String text;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            text = textMessage.getText();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(JMSException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="消费者测试TestQueue"><a href="#消费者测试TestQueue" class="headerlink" title="消费者测试TestQueue"></a>消费者测试TestQueue</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@ContextConfiguration</span>(<span class="string">"classpath:applicationContext-activemq-consumer.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestQueue</span> </span>&#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueue</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">System.in.read();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="整合Topic"><a href="#整合Topic" class="headerlink" title="整合Topic"></a>整合Topic</h3><h4 id="生产者TopicProducer"><a href="#生产者TopicProducer" class="headerlink" title="生产者TopicProducer"></a>生产者TopicProducer</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopicProducer</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> JmsTemplate jmsTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Destination  topicTextDestination;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送文本消息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendTextMessage</span><span class="params">()</span></span>&#123;</span><br><span class="line">jmsTemplate.send(topicTextDestination, <span class="keyword">new</span> MessageCreator() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Message <span class="title">createMessage</span><span class="params">(Session session)</span> <span class="keyword">throws</span> JMSException </span>&#123;</span><br><span class="line"><span class="keyword">return</span> session.createTextMessage(<span class="string">"通知：你的手机流量超了1个G"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="生产者测试TestTopic"><a href="#生产者测试TestTopic" class="headerlink" title="生产者测试TestTopic"></a>生产者测试TestTopic</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@ContextConfiguration</span>(locations=<span class="string">"classpath:applicationContext-activemq-producer.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTopic</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> TopicProducer topicProducer;</span><br><span class="line">    </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendTextQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">topicProducer.sendTextMessage();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="applicationContext-activemq-consumer-topic-xml"><a href="#applicationContext-activemq-consumer-topic-xml" class="headerlink" title="applicationContext-activemq-consumer-topic.xml"></a>applicationContext-activemq-consumer-topic.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:amq</span>=<span class="string">"http://activemq.apache.org/schema/core"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:jms</span>=<span class="string">"http://www.springframework.org/schema/jms"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context   </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/jms</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/jms/spring-jms.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 真正可以产生Connection的ConnectionFactory，由对应的 JMS服务厂商提供--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"targetConnectionFactory"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.ActiveMQConnectionFactory"</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"brokerURL"</span> <span class="attr">value</span>=<span class="string">"tcp://127.0.0.1:61616"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">    <span class="comment">&lt;!-- Spring用于管理真正的ConnectionFactory的ConnectionFactory --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"connectionFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jms.connection.SingleConnectionFactory"</span>&gt;</span>  </span><br><span class="line"><span class="comment">&lt;!-- 目标ConnectionFactory对应真实的可以产生JMS Connection的ConnectionFactory --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetConnectionFactory"</span> <span class="attr">ref</span>=<span class="string">"targetConnectionFactory"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--这个是队列目的地，点对点的  文本信息--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"topicTextDestination"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.command.ActiveMQTopic"</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"topic_text"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--这个是订阅消息目的地，文本信息--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"topicTextDestination"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.command.ActiveMQTopic"</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"topic_text"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 我的监听类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myMessageListener"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.demo.MyMessageListener"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myTopicMessageListener"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.demo.MyTopicMessageListener"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myTopicMessageListener2"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.demo.MyTopicMessageListener2"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 消息监听容器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.jms.listener.DefaultMessageListenerContainer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"connectionFactory"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"destination"</span> <span class="attr">ref</span>=<span class="string">"topicTextDestination"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageListener"</span> <span class="attr">ref</span>=<span class="string">"myMessageListener"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.jms.listener.DefaultMessageListenerContainer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"connectionFactory"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"destination"</span> <span class="attr">ref</span>=<span class="string">"topicTextDestination"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageListener"</span> <span class="attr">ref</span>=<span class="string">"myTopicMessageListener"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.jms.listener.DefaultMessageListenerContainer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"connectionFactory"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"destination"</span> <span class="attr">ref</span>=<span class="string">"topicTextDestination"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageListener"</span> <span class="attr">ref</span>=<span class="string">"myTopicMessageListener2"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="消费者测试TestTopic"><a href="#消费者测试TestTopic" class="headerlink" title="消费者测试TestTopic"></a>消费者测试TestTopic</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@ContextConfiguration</span>(locations=<span class="string">"classpath:applicationContext-activemq-topic.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTopic</span> </span>&#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendTextTopic</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">System.in.read();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ActiveMQ的安全机制"><a href="#ActiveMQ的安全机制" class="headerlink" title="ActiveMQ的安全机制"></a>ActiveMQ的安全机制</h3><p>activemq作为消息中间件这样一个独立的个体存在，连通用户和服务器。如果没有一套完备的安全机制去设置用户权限设置消息分发机制可想后果是非常严重。ActiveMQ如果不加入安全机制的话，任何人只要知道消息服务的具体地址(包括ip，端口，消息地址[队列或者主题地址，)，都可以肆无忌惮的发送、接收消息。今天我们就探讨一下他的安全机制。</p><h4 id="1-安全机制介绍"><a href="#1-安全机制介绍" class="headerlink" title="1.安全机制介绍"></a><strong>1.安全机制介绍</strong></h4><p>我们讨论安全机制一般包括两个部分：</p><ol><li>验证(Authentication)：就是要验证一个用户的有效性，即用户名、密码是否正确;</li><li>授权(Authorization)：就是授予用户某种角色，以使用户只能访问具有相应角色的资源。</li></ol><p>activemq考虑到安全方案效率问题，他提供了可插拔的安全机制，你可以使用不同的安全插件灵活为你的系统配置安全访问方式。目前activemq提供两种安全控制插件：</p><ol><li>简单认证插件(Simple authentication plugin-in)</li><li>JAAS认证插件(Java Authentication and Authorization Service)</li></ol><p>下面我们分别就这两种插件的使用做一个说明。</p><h4 id="2-简单认证插件"><a href="#2-简单认证插件" class="headerlink" title="2.简单认证插件"></a><strong>2.简单认证插件</strong></h4><p>简单认证插件的目的就是让用户简单配置。我们打开activemq服务的目录apache-activemq，在 conf目录下找到activemq.xml。进去找到：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">shutdownHooks</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.hooks.SpringContextHook"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">shutdownHooks</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在他下面添加如下即可：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">simpleAuthenticationPlugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">users</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">authenticationUser</span> <span class="attr">username</span>=<span class="string">"admin"</span> <span class="attr">password</span>=<span class="string">"admin"</span> <span class="attr">groups</span>=<span class="string">"users,admins"</span>/&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">authenticationUser</span> <span class="attr">username</span>=<span class="string">"user"</span> <span class="attr">password</span>=<span class="string">"password"</span> <span class="attr">groups</span>=<span class="string">"users"</span>/&gt;</span>     </span><br><span class="line">        <span class="tag">&lt;/<span class="name">users</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">simpleAuthenticationPlugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure><p>☆注意：<strong>此处添加的用户名和密码要和你在项目中配置的activemq用户名密码是一致的，如果在项目中不是此处已经配置过的用户发送消息的话，activemq客户端不会受理该消息。这样就达到了对非命中用户拦截的目的。</strong></p><p>比如说你有客户端使用的用户是：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">amq:connectionFactory</span> <span class="attr">id</span>=<span class="string">"amqConnectionFactory"</span></span></span><br><span class="line"><span class="tag">                           <span class="attr">brokerURL</span>=<span class="string">"tcp://127.0.0.1:61616"</span></span></span><br><span class="line"><span class="tag">                           <span class="attr">userName</span>=<span class="string">"admin"</span></span></span><br><span class="line"><span class="tag">                           <span class="attr">password</span>=<span class="string">"admin"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>那你就把该用户配置到activemq的配置文件中：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">authenticationUser</span> <span class="attr">username</span>=<span class="string">"admin"</span> <span class="attr">password</span>=<span class="string">"admin"</span> <span class="attr">groups</span>=<span class="string">"users,admins"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>上面是对用户进行限制，我们也可以对ip进行限制，还是在刚才的配置里面加上下面这一句：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">simpleAuthenticationPlugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">users</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">authenticationUser</span> <span class="attr">username</span>=<span class="string">"admin"</span> <span class="attr">password</span>=<span class="string">"admin"</span> <span class="attr">groups</span>=<span class="string">"users,admins"</span>/&gt;</span></span><br><span class="line">                   <span class="comment">&lt;!-- &lt;authenticationUser username="user" password="password" groups="users"/&gt;</span></span><br><span class="line"><span class="comment">                    &lt;authenticationUser username="guest" password="password" groups="guests"/&gt;--&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">users</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">transportConnectors</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">transportConnector</span> <span class="attr">name</span>=<span class="string">"connection1"</span> <span class="attr">uri</span>=<span class="string">"tcp://0.0.0.0:61616"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">transportConnectors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">simpleAuthenticationPlugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure><p>0.0.0.0代表本网络中的所有主机，意味着该网段的所有主机都是可以通讯的。如果改成localhost或者127.0.0.1这种的那就只有本机了。这样我们就达到了通过IP限制的目的。</p><h4 id="3-JAAS认证插件"><a href="#3-JAAS认证插件" class="headerlink" title="3.JAAS认证插件"></a><strong>3.JAAS认证插件</strong></h4><p>JAAS(Java Authentication and Authorization Service)也就是java的验证Authentication)、授权(Authorization)服务。简单来说，验证Authentication就是要验证一个用户的有效性，即用户名、密码是否正确。授权Authorization就是授予用户某种角色，可以访问哪些资源。JAASAuthentication Plugin依赖标准的JAAS机制来实现认证。通常情况下，你需要通过设置Java.security.auth.login.config系统属性来配置login<br>modules的配置文件。如果没有指定这个系统属性，那么JAAS Authentication Plugin会缺省使用login.config作为文件名。</p><p>首先我们需要编写一个login.config文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">activemq &#123;  </span><br><span class="line">    org.apache.activemq.jaas.PropertiesLoginModule required  </span><br><span class="line">    debug=true</span><br><span class="line">        org.apache.activemq.jaas.properties.user=&quot;users.properties&quot;  </span><br><span class="line">        org.apache.activemq.jaas.properties.group=&quot;groups.properties&quot;;  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>users.properties文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">admin=admin  </span><br><span class="line">user=ad1</span><br><span class="line">guest=ad1</span><br></pre></td></tr></table></figure><p>group.properties文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">admins=admin  </span><br><span class="line">users=user  </span><br><span class="line">guests=guest</span><br></pre></td></tr></table></figure><p>☆需要注意的是，PropertiesLoginModule使用本地文件的查找方式，而且查找时采用的base directory即login.config文件所在的目录，所以说这三个文件需要在同一个目录里才会找得到。另外，activemq 5.9 默认提供了以上的配置文件，在conf目录下</p><p>然后我们还是在activemq.xml配置文件中添加插件。还是上面简单插件添加的位置，添加以下插件即可，只不过你的把之前添加的简单插件注释掉。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jaasAuthenticationPlugin</span> <span class="attr">configuration</span>=<span class="string">"activemq-domain"</span> /&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;<span class="name">authorizationPlugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">authorizationMap</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">authorizationEntries</span>&gt;</span></span><br><span class="line">                 <span class="comment">&lt;!-- .表示通配符,例如USERS.&gt;表示以USERS.开头的主题,&gt;表示所有主题,read表示读的权限,write表示写的权限，admin表示角色组--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">authorizationEntry</span> <span class="attr">queue</span>=<span class="string">"&gt;"</span> <span class="attr">read</span>=<span class="string">"admins,guests"</span> <span class="attr">write</span>=<span class="string">"guests"</span> <span class="attr">admin</span>=<span class="string">"admins,guests"</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">authorizationEntry</span> <span class="attr">queue</span>=<span class="string">"USERS.&gt;"</span> <span class="attr">read</span>=<span class="string">"users"</span> <span class="attr">write</span>=<span class="string">"users"</span> <span class="attr">admin</span>=<span class="string">"users"</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">authorizationEntry</span> <span class="attr">queue</span>=<span class="string">"GUEST.&gt;"</span> <span class="attr">read</span>=<span class="string">"guests"</span> <span class="attr">write</span>=<span class="string">"guests,users"</span> <span class="attr">admin</span>=<span class="string">"guests,users"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;<span class="name">authorizationEntry</span> <span class="attr">topic</span>=<span class="string">"&gt;"</span> <span class="attr">read</span>=<span class="string">"admins"</span> <span class="attr">write</span>=<span class="string">"admins"</span> <span class="attr">admin</span>=<span class="string">"admins"</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">authorizationEntry</span> <span class="attr">topic</span>=<span class="string">"USERS.&gt;"</span> <span class="attr">read</span>=<span class="string">"users"</span> <span class="attr">write</span>=<span class="string">"users"</span> <span class="attr">admin</span>=<span class="string">"users"</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">authorizationEntry</span> <span class="attr">topic</span>=<span class="string">"GUEST.&gt;"</span> <span class="attr">read</span>=<span class="string">"guests"</span> <span class="attr">write</span>=<span class="string">"guests,users"</span> <span class="attr">admin</span>=<span class="string">"guests,users"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;<span class="name">authorizationEntry</span> <span class="attr">topic</span>=<span class="string">"ActiveMQ.Advisory.&gt;"</span> <span class="attr">read</span>=<span class="string">"guests,users"</span> <span class="attr">write</span>=<span class="string">"guests,users"</span> <span class="attr">admin</span>=<span class="string">"guests,users"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">authorizationEntries</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">authorizationMap</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">authorizationPlugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加完以上配置部分，重启avtivemq服务端，就会按照上面配置的用户进行读写的权限配置。</p><p>从上面看JAAS插件的权限分配要比简单插件的权限更加细致，不同的用户可以分别配置读写的权限，admin用户拥有创建topic或是queue的特权等等这样细致的划分，不同的用户各司其职，减少了误操作，或是刻意破换的可能性</p><p>参考：</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ActiveMQ&quot;&gt;&lt;a href=&quot;#ActiveMQ&quot; class=&quot;headerlink&quot; title=&quot;ActiveMQ&quot;&gt;&lt;/a&gt;ActiveMQ&lt;/h1&gt;&lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="activeMQ" scheme="http://yoursite.com/tags/activeMQ/"/>
    
  </entry>
  
  <entry>
    <title>分布式事务详解</title>
    <link href="http://yoursite.com/2019/07/25/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/07/25/分布式事务详解/</id>
    <published>2019-07-25T13:46:45.000Z</published>
    <updated>2019-07-25T13:47:30.539Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h1><h2 id="分布式事务的解释："><a href="#分布式事务的解释：" class="headerlink" title="分布式事务的解释："></a>分布式事务的解释：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">分布式事务就是指事务的参与者、支持事务的服务器、资源服务器以及事务管理器分别位于不同的分布式系统的不同节点之上。以上是百度百科的解释，简单的说，就是一次大的操作由不同的小操作组成，这些小的操作分布在不同的服务器上，且属于不同的应用，分布式事务需要保证这些小操作要么全部成功，要么全部失败。本质上来说，分布式事务就是为了保证不同数据库的数据一致性</span><br></pre></td></tr></table></figure><h2 id="问题产生原因"><a href="#问题产生原因" class="headerlink" title="问题产生原因"></a>问题产生原因</h2><h3 id="1-数据库分表"><a href="#1-数据库分表" class="headerlink" title="1.数据库分表"></a>1.数据库分表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当数据库单表一年产生的数据超过1000W，那么就要考虑分库分表，简单的说就是原来的一个数据库变成了多个数据库。这时候，如果一个操作既访问01库，又访问02库，而且要保证数据的一致性，那么就要用到分布式事务。</span><br></pre></td></tr></table></figure><h3 id="2-业务的SOA化"><a href="#2-业务的SOA化" class="headerlink" title="2.业务的SOA化"></a>2.业务的SOA化</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">所谓的SOA化，就是业务的服务化。比如原来单机支撑了整个电商网站，现在对整个网站进行拆解，分离出了订单中心、用户中心、库存中心。对于订单中心，有专门的数据库存储订单信息，用户中心也有专门的数据库存储用户信息，库存中心也会有专门的数据库存储库存信息。这时候如果要同时对订单和库存进行操作，那么就会涉及到订单数据库和库存数据库，为了保证数据一致性，就需要用到分布式事务。</span><br></pre></td></tr></table></figure><h2 id="事务的ACID性"><a href="#事务的ACID性" class="headerlink" title="事务的ACID性"></a>事务的ACID性</h2><h3 id="1-原子性"><a href="#1-原子性" class="headerlink" title="1.原子性"></a>1.原子性</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在整个事务中的所有操作，要么全部成功，要么全部失败，没有中间状态。</span><br><span class="line">如果事务在执行的过程中发生错误，那么整个事务的所有操作都要回滚，整个事务就像没被执行过一样。</span><br></pre></td></tr></table></figure><h3 id="2-一致性"><a href="#2-一致性" class="headerlink" title="2.一致性"></a>2.一致性</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">事务的执行必须保证系统的一致性，就拿转账为例，A有500元，B有300元，如果在一个事务里A成功转给B50元，那么不管并发多少，不管发生什么，只要事务执行成功了，那么最后A账户一定是450元，B账户一定是350元。</span><br></pre></td></tr></table></figure><h3 id="3-隔离性"><a href="#3-隔离性" class="headerlink" title="3.隔离性"></a>3.隔离性</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">所谓的隔离性就是说，事务与事务之间不会互相影响，一个事务的中间状态不会被其他事务感知。</span><br></pre></td></tr></table></figure><h4 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h4><h5 id="1-Read-uncommitted-：读未提交"><a href="#1-Read-uncommitted-：读未提交" class="headerlink" title="1.Read uncommitted ：读未提交"></a>1.<strong>Read uncommitted</strong> ：读未提交</h5><h6 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一个事务可以读取另一个未提交事务的数据。</span><br></pre></td></tr></table></figure><h6 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">产生脏读</span><br></pre></td></tr></table></figure><h6 id="事例"><a href="#事例" class="headerlink" title="事例"></a>事例</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">老板要给程序员发工资，程序员的工资是3.6万/月。但是发工资时老板不小心按错了数字，按成3.9万/月，该钱已经打到程序员的户口，但是事务还没有提交，就在这时，程序员去查看自己这个月的工资，发现比往常多了3千元，以为涨工资了非常高兴。但是老板及时发现了不对，马上回滚差点就提交了的事务，将数字改成3.6万再提交。</span><br></pre></td></tr></table></figure><h6 id="事例分析"><a href="#事例分析" class="headerlink" title="事例分析"></a>事例分析</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">实际程序员这个月的工资还是3.6万，但是程序员看到的是3.9万。他看到的是老板还没提交事务时的数据。这就是脏读。</span><br></pre></td></tr></table></figure><h5 id="2-Read-committed-读提交"><a href="#2-Read-committed-读提交" class="headerlink" title="2.Read committed :读提交"></a>2.<strong>Read committed</strong> :读提交</h5><h6 id="解释-1"><a href="#解释-1" class="headerlink" title="解释"></a>解释</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一个事务要等另一个事务提交后才能读取数据。</span><br></pre></td></tr></table></figure><h6 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一个事务范围内两个相同的查询却返回了不同数据，这就是不可重复读。</span><br></pre></td></tr></table></figure><h6 id="事例-1"><a href="#事例-1" class="headerlink" title="事例"></a>事例</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">程序员拿着信用卡去享受生活（卡里当然是只有3.6万），当他埋单时（程序员事务开启），收费系统事先检测到他的卡里有3.6万，就在这个时候！！程序员的妻子要把钱全部转出充当家用，并提交。当收费系统准备扣款时，再检测卡里的金额，发现已经没钱了（第二次检测金额当然要等待妻子转出金额事务提交完）。程序员就会很郁闷，明明卡里是有钱的…</span><br></pre></td></tr></table></figure><h6 id="事例分析-1"><a href="#事例分析-1" class="headerlink" title="事例分析"></a>事例分析</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这就是读提交，若有事务对数据进行更新（UPDATE）操作时，读操作事务要等待这个更新操作事务提交后才能读取数据，可以解决脏读问题。但在这个事例中，出现了一个事务范围内两个相同的查询却返回了不同数据，这就是不可重复读。</span><br></pre></td></tr></table></figure><h5 id="3-Repeatable-read-重复读"><a href="#3-Repeatable-read-重复读" class="headerlink" title="3.Repeatable read  :重复读"></a>3.<strong>Repeatable read</strong>  :重复读</h5><h6 id="解释-2"><a href="#解释-2" class="headerlink" title="解释"></a>解释</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">重复读，就是在开始读取数据（事务开启）时，不再允许修改操作</span><br></pre></td></tr></table></figure><h6 id="问题-2"><a href="#问题-2" class="headerlink" title="问题"></a>问题</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可能还会有幻读问题</span><br></pre></td></tr></table></figure><h6 id="事例-2"><a href="#事例-2" class="headerlink" title="事例"></a>事例</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">程序员拿着信用卡去享受生活（卡里当然是只有3.6万），当他埋单时（事务开启，不允许其他事务的UPDATE修改操作），收费系统事先检测到他的卡里有3.6万。这个时候他的妻子不能转出金额了。接下来收费系统就可以扣款了。</span><br></pre></td></tr></table></figure><h6 id="事例分析-2"><a href="#事例分析-2" class="headerlink" title="事例分析"></a>事例分析</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">重复读可以解决不可重复读问题。写到这里，应该明白的一点就是，不可重复读对应的是修改，即UPDATE操作。但是可能还会有幻读问题。因为幻读问题对应的是插入INSERT操作，而不是UPDATE操作。</span><br></pre></td></tr></table></figure><h5 id="4-Serializable-序列化"><a href="#4-Serializable-序列化" class="headerlink" title="4.Serializable   :序列化"></a>4.<strong>Serializable</strong>   :序列化</h5><h6 id="解释-3"><a href="#解释-3" class="headerlink" title="解释"></a>解释</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Serializable 是最高的事务隔离级别，在该级别下，事务串行化顺序执行，可以避免脏读、不可重复读与幻读。</span><br><span class="line">但是这种事务隔离级别效率低下，比较耗数据库性能，一般不使用。</span><br></pre></td></tr></table></figure><h6 id="问题-3"><a href="#问题-3" class="headerlink" title="问题"></a>问题</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">效率低下</span><br></pre></td></tr></table></figure><h3 id="4-持久性"><a href="#4-持久性" class="headerlink" title="4.持久性"></a>4.持久性</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">所谓的持久性，就是说一单事务完成了，那么事务对数据所做的变更就完全保存在了数据库中，即使发生停电，系统宕机也是如此。</span><br></pre></td></tr></table></figure><h2 id="分布式事务的应用场景"><a href="#分布式事务的应用场景" class="headerlink" title="分布式事务的应用场景"></a>分布式事务的应用场景</h2><h3 id="支付"><a href="#支付" class="headerlink" title="支付"></a>支付</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">最经典的场景就是支付了，一笔支付，是对买家账户进行扣款，同时对卖家账户进行加钱，这些操作必须在一个事务里执行，要么全部成功，要么全部失败。而对于买家账户属于买家中心，对应的是买家数据库，而卖家账户属于卖家中心，对应的是卖家数据库，对不同数据库的操作必然需要引入分布式事务。</span><br></pre></td></tr></table></figure><h3 id="在线下单"><a href="#在线下单" class="headerlink" title="在线下单"></a>在线下单</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">买家在电商平台下单，往往会涉及到两个动作，一个是扣库存，第二个是更新订单状态，库存和订单一般属于不同的数据库，需要使用分布式事务保证数据一致性。</span><br></pre></td></tr></table></figure><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="消息事务-最终一致性"><a href="#消息事务-最终一致性" class="headerlink" title="消息事务+最终一致性"></a>消息事务+最终一致性</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">基于消息中间件的两阶段提交,需要业务系统结合 MQ 消息中间件实现，在实现过程中需要保 证消息的成功发送及成功消费。即需要通过业务系统控制MQ 的消息状态</span><br></pre></td></tr></table></figure><h3 id="TCC编程模式"><a href="#TCC编程模式" class="headerlink" title="TCC编程模式"></a>TCC编程模式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">所谓的TCC编程模式，也是两阶段提交的一个变种。TCC提供了一个编程框架，将整个业务逻辑分为三块：Try、Confirm和Cancel三个操作。以在线下单为例，Try阶段会去扣库存，Confirm阶段则是去更新订单状态，如果更新订单失败，则进入Cancel阶段，会去恢复库存。总之，TCC就是通过代码人为实现了两阶段提交，不同的业务场景所写的代码都不一样，复杂度也不一样，因此，这种模式并不能很好地被复用。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;分布式事务&quot;&gt;&lt;a href=&quot;#分布式事务&quot; class=&quot;headerlink&quot; title=&quot;分布式事务&quot;&gt;&lt;/a&gt;分布式事务&lt;/h1&gt;&lt;h2 id=&quot;分布式事务的解释：&quot;&gt;&lt;a href=&quot;#分布式事务的解释：&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="分布式事务" scheme="http://yoursite.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>POI用法详解</title>
    <link href="http://yoursite.com/2019/07/25/POI%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/07/25/POI用法详解/</id>
    <published>2019-07-25T13:43:32.000Z</published>
    <updated>2019-07-25T13:45:34.343Z</updated>
    
    <content type="html"><![CDATA[<h1 id="POI"><a href="#POI" class="headerlink" title="POI"></a>POI</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">目前常见读写Excel的工具类开源javaAPI有两种方式，</span><br><span class="line"></span><br><span class="line">一个是JXL（Java Excel API） 官网地址：http://jexcelapi.sourceforge.net/</span><br><span class="line"></span><br><span class="line">一个是Apache的POI（Poor Obfuscation Implementation）官网地址：http://poi.apache.org/</span><br><span class="line"></span><br><span class="line">POI支持微软的OLE2格式文件Office 2003及以下版本；同时支持微软的OOXML（Office Open XML）标准，也就是Office 2007以上版本。JXL只能实现对Excel 2003以下版本的支持。</span><br><span class="line"></span><br><span class="line">POI使用HSSF对象操作OLE2格式Excel，文件后缀为.xls的；使用XSSF、SXSSF对象操作OOXML格式Excel，文件后缀为.xlsx的。</span><br><span class="line"></span><br><span class="line">对于OLE2版本的Excel，一个Sheet工作表它的行最多支持到65536行，列支持到256列；</span><br><span class="line"></span><br><span class="line">对于OOXML版本的Excel，一个Sheet工作表它的行支持到1048576行，列支持到16384</span><br><span class="line">列。</span><br></pre></td></tr></table></figure><h2 id="三种workbook"><a href="#三种workbook" class="headerlink" title="三种workbook"></a>三种workbook</h2><h2 id="基本使用方法-amp-核心API"><a href="#基本使用方法-amp-核心API" class="headerlink" title="基本使用方法&amp;核心API"></a>基本使用方法&amp;核心API</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//工作簿操作</span></span><br><span class="line"><span class="comment">//新建工作簿</span></span><br><span class="line">WorkBook book = <span class="keyword">new</span> HSSFWorkBook();</span><br><span class="line"><span class="comment">//打开工作簿</span></span><br><span class="line">WorkBook book = <span class="keyword">new</span> HSSFWorkBook(<span class="keyword">new</span> FileInputStream(xlsFile));</span><br><span class="line"><span class="comment">//建立新的sheet对象</span></span><br><span class="line">HSSFSheet sheet = book.createSheet(<span class="string">"sheetName"</span>);</span><br><span class="line"><span class="comment">//打开第一个sheet</span></span><br><span class="line">book.getSheetAt(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//色织sheet的名称</span></span><br><span class="line">book.setSheetName(<span class="number">0</span>,<span class="string">"sheetName"</span>);</span><br><span class="line"><span class="comment">//创建行</span></span><br><span class="line">HSSFRow row = sheet.createRow(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//指定列，创建单元格</span></span><br><span class="line">HSSFCell cell = row.createCell((<span class="keyword">short</span>)<span class="number">0</span>);<span class="comment">//0行0列</span></span><br><span class="line"><span class="comment">//设置单元格的值</span></span><br><span class="line">cell.setCellValue(<span class="string">"cellValue"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//样式操作</span></span><br><span class="line"><span class="comment">//获取样式对象</span></span><br><span class="line">CellStyle style = book.createCellStyle();</span><br><span class="line"><span class="comment">//创建字体对象</span></span><br><span class="line">Font font = book.createFont();</span><br><span class="line"><span class="comment">//设置字体大小</span></span><br><span class="line">font.setFontHeightlnPoints((<span class="keyword">short</span>)<span class="number">16</span>);</span><br><span class="line"><span class="comment">//设置字体类型</span></span><br><span class="line">font.setFontName(<span class="string">"楷体"</span>);</span><br><span class="line"><span class="comment">//将字体设置到style</span></span><br><span class="line">style.setFont(font);</span><br><span class="line"><span class="comment">//将样式设置到单元格</span></span><br><span class="line">cell.setCellStyle(style);</span><br></pre></td></tr></table></figure><h2 id="字体修饰"><a href="#字体修饰" class="headerlink" title="字体修饰"></a>字体修饰</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置单元格样式</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> HSSFCellStyle <span class="title">Style</span><span class="params">(HSSFWorkbook wb)</span></span>&#123;</span><br><span class="line">HSSFCellStyle curStyle = wb.createCellStyle();</span><br><span class="line">HSSFFont curFont = wb.createFont();<span class="comment">//设置字体</span></span><br><span class="line"><span class="comment">//curFont.setFontName("Times New Roman");//设置英文字体</span></span><br><span class="line">curFont.setFontName(<span class="string">"微软雅黑"</span>);<span class="comment">//设置英文字体</span></span><br><span class="line">curFont.setCharSet(HSSFFont.DEFAULT_CHARSET);<span class="comment">//设置中文字体，那必须还要再对单元格进行编码设置</span></span><br><span class="line">curFont.setFontHeightInPoints((<span class="keyword">short</span>)<span class="number">10</span>);<span class="comment">//字体大小</span></span><br><span class="line">curFont.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD); <span class="comment">//加粗</span></span><br><span class="line"></span><br><span class="line">curStyle.setFont(curFont);</span><br><span class="line"></span><br><span class="line">curStyle.setBorderTop(HSSFCellStyle.BORDER_THICK);<span class="comment">//粗实线</span></span><br><span class="line">curStyle.setBorderBottom(HSSFCellStyle.BORDER_THIN);<span class="comment">//实线</span></span><br><span class="line">curStyle.setBorderLeft(HSSFCellStyle.BORDER_MEDIUM);<span class="comment">//比较粗实线</span></span><br><span class="line">curStyle.setBorderRight(HSSFCellStyle.BORDER_THIN);<span class="comment">//实线</span></span><br><span class="line"></span><br><span class="line">curStyle.setWrapText(<span class="keyword">true</span>);  <span class="comment">//换行   </span></span><br><span class="line">curStyle.setAlignment(HSSFCellStyle.ALIGN_RIGHT);<span class="comment">//横向具右对齐</span></span><br><span class="line">curStyle.setVerticalAlignment(HSSFCellStyle.VERTICAL_CENTER);<span class="comment">//单元格垂直居中</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> curStyle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单元格操作"><a href="#单元格操作" class="headerlink" title="单元格操作"></a>单元格操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//纵向合并单元格 </span></span><br><span class="line">Region region = <span class="keyword">null</span>;</span><br><span class="line">region = <span class="keyword">new</span> Region(curRow-<span class="number">1</span>, (<span class="keyword">short</span>)(<span class="number">1</span>), curRow-<span class="number">1</span>+<span class="number">3</span>, (<span class="keyword">short</span>)<span class="number">1</span>);</span><br><span class="line">sheet.addMergedRegion(region);</span><br><span class="line"><span class="comment">//横向合并单元格</span></span><br><span class="line">CellRangeAddress</span><br><span class="line">sheet.addMergedRegion(<span class="keyword">new</span> CellRangeAddress(开始行，结束行，开始列，结束列));</span><br><span class="line"><span class="comment">// 横向居中</span></span><br><span class="line">style.setAlignment(CellStyle.ALIGN_CENTER); </span><br><span class="line"><span class="comment">// 纵向居中</span></span><br><span class="line">style.setVerticalAlignment(CellStyle.VERTICAL_CENTER);</span><br></pre></td></tr></table></figure><h2 id="页面操作"><a href="#页面操作" class="headerlink" title="页面操作"></a>页面操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置打印方向：默认纵向</span></span><br><span class="line">PrintSetup ps = sheet.getPrintSetup();</span><br><span class="line">ps.setLandscape(<span class="keyword">true</span>);<span class="comment">//横向打印</span></span><br><span class="line"><span class="comment">//自适应列宽：</span></span><br><span class="line"><span class="comment">//bug 对中文支持不好，列宽不够宽</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ;i&lt;titles.length;i++)&#123;</span><br><span class="line">sheet.autoSizeColumn((<span class="keyword">short</span>)i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//设置行高：</span></span><br><span class="line">nRow.setHeightInPoints(<span class="number">18</span>);</span><br><span class="line"><span class="comment">//设置列宽：</span></span><br><span class="line">sheet.setColumnWidth((<span class="keyword">short</span>)colNo, (<span class="keyword">short</span>)(<span class="number">256</span>*<span class="number">8</span>));</span><br><span class="line"><span class="comment">//设置每列默认宽度：</span></span><br><span class="line">sheet.setDefaultColumnWidth((<span class="keyword">short</span>) <span class="number">20</span>); </span><br><span class="line"><span class="comment">//设置标题：</span></span><br><span class="line"><span class="comment">//将第一行作为标题，即每页都打印此行 sheetN,startCol,stopCol,startRow,stopRow</span></span><br><span class="line">wb.setRepeatingRowsAndColumns(<span class="number">0</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//页脚：</span></span><br><span class="line">HSSFFooter footer = sheet.getFooter();</span><br><span class="line">footer.setRight(<span class="string">"第"</span>+HSSFFooter.page()+<span class="string">"页 共"</span>+HSSFFooter.numPages()+<span class="string">"页     "</span>);<span class="comment">//页数</span></span><br><span class="line"></span><br><span class="line">分页：</span><br><span class="line"></span><br><span class="line"><span class="comment">//POI分页符有BUG，必须在模板文件中插入一个分页符，然后再此处删除预设的分页符；最后在下面重新设置分页符。</span></span><br><span class="line"><span class="comment">//sheet.setAutobreaks(false);</span></span><br><span class="line"><span class="comment">//int iRowBreaks[] = sheet.getRowBreaks();</span></span><br><span class="line"><span class="comment">//sheet.removeRowBreak(3);</span></span><br><span class="line"><span class="comment">//sheet.removeRowBreak(4);</span></span><br><span class="line"><span class="comment">//sheet.removeRowBreak(5);</span></span><br><span class="line"><span class="comment">//sheet.removeRowBreak(6);</span></span><br><span class="line">sheet.setRowBreak(行数);<span class="comment">//在第startRow行设置分页符</span></span><br></pre></td></tr></table></figure><h2 id="常用字体样式方法"><a href="#常用字体样式方法" class="headerlink" title="常用字体样式方法"></a>常用字体样式方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//大标题的样式</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CellStyle <span class="title">bigTitle</span><span class="params">(Workbook wb)</span></span>&#123;</span><br><span class="line">CellStyle style = wb.createCellStyle();</span><br><span class="line">Font font = wb.createFont();</span><br><span class="line">font.setFontName(<span class="string">"宋体"</span>);</span><br><span class="line">font.setFontHeightInPoints((<span class="keyword">short</span>)<span class="number">16</span>);</span><br><span class="line">font.setBoldweight(Font.BOLDWEIGHT_BOLD);<span class="comment">//字体加粗</span></span><br><span class="line"></span><br><span class="line">style.setFont(font);</span><br><span class="line"></span><br><span class="line">style.setAlignment(CellStyle.ALIGN_CENTER);<span class="comment">//横向居中</span></span><br><span class="line">style.setVerticalAlignment(CellStyle.VERTICAL_CENTER);<span class="comment">//纵向居中</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> style;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//小标题的样式</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CellStyle <span class="title">title</span><span class="params">(Workbook wb)</span></span>&#123;</span><br><span class="line">CellStyle style = wb.createCellStyle();</span><br><span class="line">Font font = wb.createFont();</span><br><span class="line">font.setFontName(<span class="string">"黑体"</span>);</span><br><span class="line">font.setFontHeightInPoints((<span class="keyword">short</span>)<span class="number">12</span>);</span><br><span class="line"></span><br><span class="line">style.setFont(font);</span><br><span class="line"></span><br><span class="line">style.setAlignment(CellStyle.ALIGN_CENTER);<span class="comment">//横向居中</span></span><br><span class="line">style.setVerticalAlignment(CellStyle.VERTICAL_CENTER);<span class="comment">//纵向居中</span></span><br><span class="line"></span><br><span class="line">style.setBorderTop(CellStyle.BORDER_THIN);<span class="comment">//上细线</span></span><br><span class="line">style.setBorderBottom(CellStyle.BORDER_THIN);<span class="comment">//下细线</span></span><br><span class="line">style.setBorderLeft(CellStyle.BORDER_THIN);<span class="comment">//左细线</span></span><br><span class="line">style.setBorderRight(CellStyle.BORDER_THIN);<span class="comment">//右细线</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> style;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//文字样式</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CellStyle <span class="title">text</span><span class="params">(Workbook wb)</span></span>&#123;</span><br><span class="line">CellStyle style = wb.createCellStyle();</span><br><span class="line">Font font = wb.createFont();</span><br><span class="line">font.setFontName(<span class="string">"Times New Roman"</span>);</span><br><span class="line">font.setFontHeightInPoints((<span class="keyword">short</span>)<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">style.setFont(font);</span><br><span class="line"></span><br><span class="line">style.setAlignment(CellStyle.ALIGN_LEFT);<span class="comment">//横向居左</span></span><br><span class="line">style.setVerticalAlignment(CellStyle.VERTICAL_CENTER);<span class="comment">//纵向居中</span></span><br><span class="line"></span><br><span class="line">style.setBorderTop(CellStyle.BORDER_THIN);<span class="comment">//上细线</span></span><br><span class="line">style.setBorderBottom(CellStyle.BORDER_THIN);<span class="comment">//下细线</span></span><br><span class="line">style.setBorderLeft(CellStyle.BORDER_THIN);<span class="comment">//左细线</span></span><br><span class="line">style.setBorderRight(CellStyle.BORDER_THIN);<span class="comment">//右细线</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> style;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Zip的方式导出POI"><a href="#Zip的方式导出POI" class="headerlink" title="Zip的方式导出POI"></a>Zip的方式导出POI</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SXSSFWorkbook workbook = <span class="keyword">new</span> SXSSFWorkbook(<span class="number">100</span>);</span><br><span class="line">ZipOutputStream zipOut = <span class="keyword">new</span> ZipOutputStream(request.getOutputStream());</span><br><span class="line">workbook.createSheet(<span class="string">"..."</span>);</span><br><span class="line">zipOut.</span><br><span class="line">workbook.write(zipOut);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;POI&quot;&gt;&lt;a href=&quot;#POI&quot; class=&quot;headerlink&quot; title=&quot;POI&quot;&gt;&lt;/a&gt;POI&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;f
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="POI" scheme="http://yoursite.com/tags/POI/"/>
    
  </entry>
  
</feed>
